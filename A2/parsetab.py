
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSleftPLUSMINUSleftTIMESDIVIDErightUMINUSrightAMPERSANDSTARID NUMBER COMMENT LPAREN RPAREN LBRACE RBRACE SEMICOLON AMPERSAND COMMA PLUS MINUS TIMES DIVIDE EQUALS INT VOID MAIN\n\tstart : function\n\t\n\tfunction : type MAIN LPAREN args RPAREN LBRACE statements RBRACE\n\ttype : INT\n\t\t| VOID\t\t\n\t\n\t\targs : arg COMMA args\n\t\t\t| arg\n\t\t\t| \n\t\targ : type ID\n\t\n\tvar : ID\n\t\n\tconst : NUMBER\n\t\n\tpointer : TIMES pointer %prec STAR\n\t\t\t| TIMES address %prec STAR\n\t\t\t| TIMES var %prec STAR\n\t\n\taddress : AMPERSAND pointer\n\t\t\t| AMPERSAND address\n\t\t\t| AMPERSAND var\n\t\n\tstatements :  statement statements\n\t\t\t\t| \n\tstatement : declaration\n\t\t\t| xassignment\n\t\t\t| COMMENT\n\t\n\tdeclaration : type idlist SEMICOLON\n\t\n\tidlist : pointer COMMA idlist \n\t\t\t| ID COMMA idlist\n\t\t\t| ID\n\t\t\t| pointer\n\t\n\txassignment : assignmentlist SEMICOLON\n\t\n\tassignmentlist : assignment COMMA assignmentlist \n\t\t\t\t\t| assignment\n\t\n\tassignment : pointer EQUALS expression\n\t\t\t\t| var EQUALS expression\n\t\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression TIMES expression\n\t\t\t\t| expression DIVIDE expression\n\t\t\t\t| pointer\n\t\t\t\t| address\n\t\t\t\t| const\n\t\t\t\t| var\n\t\t\t\t| LPAREN expression RPAREN\n\t\n\texpression : MINUS expression %prec UMINUS\n\t'
    
_lr_action_items = {'LPAREN':([6,34,36,45,49,60,61,62,63,],[7,45,45,45,45,45,45,45,45,]),'INT':([0,7,13,14,16,18,22,25,33,44,],[1,1,1,1,-19,1,-21,-20,-27,-22,]),'AMPERSAND':([27,34,36,38,45,49,60,61,62,63,],[38,38,38,38,38,38,38,38,38,38,]),'COMMA':([10,11,17,26,30,31,37,39,40,46,47,48,50,51,52,53,54,55,56,64,65,66,67,68,69,],[13,-8,28,-9,42,43,-12,-11,-13,-10,-30,-38,-37,-36,-39,-31,-15,-14,-16,-41,-40,-32,-35,-34,-33,]),'$end':([2,5,35,],[-1,0,-2,]),'ID':([1,4,8,14,16,18,19,22,25,27,28,33,34,36,38,42,43,44,45,49,60,61,62,63,],[-3,-4,11,26,-19,26,31,-21,-20,26,26,-27,26,26,26,31,31,-22,26,26,26,26,26,26,]),'NUMBER':([34,36,45,49,60,61,62,63,],[46,46,46,46,46,46,46,46,]),'EQUALS':([21,24,26,37,39,40,54,55,56,],[34,36,-9,-12,-11,-13,-15,-14,-16,]),'MINUS':([26,34,36,37,39,40,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,],[-9,49,49,-12,-11,-13,49,-10,63,-38,49,-37,-36,-39,63,-15,-14,-16,63,49,49,49,49,-41,-40,-32,-35,-34,-33,]),'RBRACE':([14,16,18,22,23,25,29,33,44,],[-18,-19,-18,-21,35,-20,-17,-27,-22,]),'VOID':([0,7,13,14,16,18,22,25,33,44,],[4,4,4,4,-19,4,-21,-20,-27,-22,]),'PLUS':([26,37,39,40,46,47,48,50,51,52,53,54,55,56,59,64,65,66,67,68,69,],[-9,-12,-11,-13,-10,60,-38,-37,-36,-39,60,-15,-14,-16,60,-41,-40,-32,-35,-34,-33,]),'RPAREN':([7,9,10,11,13,15,26,37,39,40,46,48,50,51,52,54,55,56,59,64,65,66,67,68,69,],[-7,12,-6,-8,-7,-5,-9,-12,-11,-13,-10,-38,-37,-36,-39,-15,-14,-16,65,-41,-40,-32,-35,-34,-33,]),'COMMENT':([14,16,18,22,25,33,44,],[22,-19,22,-21,-20,-27,-22,]),'MAIN':([1,3,4,],[-3,6,-4,]),'SEMICOLON':([17,20,26,30,31,32,37,39,40,41,46,47,48,50,51,52,53,54,55,56,57,58,64,65,66,67,68,69,],[-29,33,-9,-26,-25,44,-12,-11,-13,-28,-10,-30,-38,-37,-36,-39,-31,-15,-14,-16,-23,-24,-41,-40,-32,-35,-34,-33,]),'LBRACE':([12,],[14,]),'DIVIDE':([26,37,39,40,46,47,48,50,51,52,53,54,55,56,59,64,65,66,67,68,69,],[-9,-12,-11,-13,-10,61,-38,-37,-36,-39,61,-15,-14,-16,61,-41,-40,61,-35,-34,61,]),'TIMES':([1,4,14,16,18,19,22,25,26,27,28,33,34,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,64,65,66,67,68,69,],[-3,-4,27,-19,27,27,-21,-20,-9,27,27,-27,27,27,-12,27,-11,-13,27,27,-22,27,-10,62,-38,27,-37,-36,-39,62,-15,-14,-16,62,27,27,27,27,-41,-40,62,-35,-34,62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([34,36,45,49,60,61,62,63,],[47,53,59,64,66,67,68,69,]),'statements':([14,18,],[23,29,]),'address':([27,34,36,38,45,49,60,61,62,63,],[37,50,50,54,50,50,50,50,50,50,]),'assignment':([14,18,28,],[17,17,17,]),'function':([0,],[2,]),'type':([0,7,13,14,18,],[3,8,8,19,19,]),'const':([34,36,45,49,60,61,62,63,],[48,48,48,48,48,48,48,48,]),'arg':([7,13,],[10,10,]),'xassignment':([14,18,],[25,25,]),'assignmentlist':([14,18,28,],[20,20,41,]),'start':([0,],[5,]),'args':([7,13,],[9,15,]),'pointer':([14,18,19,27,28,34,36,38,42,43,45,49,60,61,62,63,],[21,21,30,39,21,51,51,55,30,30,51,51,51,51,51,51,]),'declaration':([14,18,],[16,16,]),'idlist':([19,42,43,],[32,57,58,]),'var':([14,18,27,28,34,36,38,45,49,60,61,62,63,],[24,24,40,24,52,52,56,52,52,52,52,52,52,]),'statement':([14,18,],[18,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','assign2.py',85),
  ('function -> type MAIN LPAREN args RPAREN LBRACE statements RBRACE','function',8,'p_function','assign2.py',98),
  ('type -> INT','type',1,'p_function','assign2.py',99),
  ('type -> VOID','type',1,'p_function','assign2.py',100),
  ('args -> arg COMMA args','args',3,'p_args','assign2.py',106),
  ('args -> arg','args',1,'p_args','assign2.py',107),
  ('args -> <empty>','args',0,'p_args','assign2.py',108),
  ('arg -> type ID','arg',2,'p_args','assign2.py',109),
  ('var -> ID','var',1,'p_var','assign2.py',115),
  ('const -> NUMBER','const',1,'p_const','assign2.py',121),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','assign2.py',128),
  ('pointer -> TIMES address','pointer',2,'p_pointer','assign2.py',129),
  ('pointer -> TIMES var','pointer',2,'p_pointer','assign2.py',130),
  ('address -> AMPERSAND pointer','address',2,'p_address','assign2.py',136),
  ('address -> AMPERSAND address','address',2,'p_address','assign2.py',137),
  ('address -> AMPERSAND var','address',2,'p_address','assign2.py',138),
  ('statements -> statement statements','statements',2,'p_statements','assign2.py',144),
  ('statements -> <empty>','statements',0,'p_statements','assign2.py',145),
  ('statement -> declaration','statement',1,'p_statements','assign2.py',146),
  ('statement -> xassignment','statement',1,'p_statements','assign2.py',147),
  ('statement -> COMMENT','statement',1,'p_statements','assign2.py',148),
  ('declaration -> type idlist SEMICOLON','declaration',3,'p_declaration','assign2.py',154),
  ('idlist -> pointer COMMA idlist','idlist',3,'p_idlist','assign2.py',160),
  ('idlist -> ID COMMA idlist','idlist',3,'p_idlist','assign2.py',161),
  ('idlist -> ID','idlist',1,'p_idlist','assign2.py',162),
  ('idlist -> pointer','idlist',1,'p_idlist','assign2.py',163),
  ('xassignment -> assignmentlist SEMICOLON','xassignment',2,'p_xassignment','assign2.py',169),
  ('assignmentlist -> assignment COMMA assignmentlist','assignmentlist',3,'p_assignmentlist','assign2.py',175),
  ('assignmentlist -> assignment','assignmentlist',1,'p_assignmentlist','assign2.py',176),
  ('assignment -> pointer EQUALS expression','assignment',3,'p_assignment','assign2.py',182),
  ('assignment -> var EQUALS expression','assignment',3,'p_assignment','assign2.py',183),
  ('expression -> expression PLUS expression','expression',3,'p_expression','assign2.py',190),
  ('expression -> expression MINUS expression','expression',3,'p_expression','assign2.py',191),
  ('expression -> expression TIMES expression','expression',3,'p_expression','assign2.py',192),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','assign2.py',193),
  ('expression -> pointer','expression',1,'p_expression','assign2.py',194),
  ('expression -> address','expression',1,'p_expression','assign2.py',195),
  ('expression -> const','expression',1,'p_expression','assign2.py',196),
  ('expression -> var','expression',1,'p_expression','assign2.py',197),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','assign2.py',198),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','assign2.py',213),
]
