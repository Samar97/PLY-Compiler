
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightEQUALSleftPLUSMINUSleftTIMESDIVIDErightUMINUSrightAMPERSANDSTARID NUMBER COMMENT LPAREN RPAREN LBRACE RBRACE SEMICOLON AMPERSAND COMMA PLUS MINUS TIMES DIVIDE EQUALS INT VOID MAIN\n\tstart : function\n\t\n\tfunction : VOID MAIN LPAREN RPAREN LBRACE statements RBRACE\n\ttype : INT\n\t\t| VOID\t\t\n\t\n\tvar : ID\n\t\n\tconst : NUMBER\n\t\n\tpointer : TIMES pointer %prec STAR\n\t\t\t| TIMES address %prec STAR\n\t\t\t| TIMES var %prec STAR\n\t\n\taddress : AMPERSAND pointer\n\t\t\t| AMPERSAND address\n\t\t\t| AMPERSAND var\n\t\n\tstatements :  statement statements\n\t\t\t\t| \n\tstatement : declaration\n\t\t\t| xassignment\n\t\t\t| COMMENT\n\t\n\tdeclaration : type idlist SEMICOLON\n\t\n\tidlist : pointer COMMA idlist \n\t\t\t| ID COMMA idlist\n\t\t\t| ID\n\t\t\t| pointer\n\t\n\txassignment : assignmentlist SEMICOLON\n\t\n\tassignmentlist : assignment COMMA assignmentlist \n\t\t\t\t\t| assignment\n\t\n\tassignment : pointer EQUALS expression\n\t\t\t\t| var EQUALS expression\n\t\n\texpression : expression PLUS expression\n\t\t\t\t| expression MINUS expression\n\t\t\t\t| expression TIMES expression\n\t\t\t\t| expression DIVIDE expression\n\t\t\t\t| pointer\n\t\t\t\t| address\n\t\t\t\t| const\n\t\t\t\t| var\n\t\t\t\t| LPAREN expression RPAREN\n\t\n\texpression : MINUS expression %prec UMINUS\n\t'
    
_lr_action_items = {'VOID':([0,7,10,14,16,17,30,45,],[1,12,-16,12,-17,-15,-23,-18,]),'LBRACE':([6,],[7,]),'COMMA':([11,13,26,28,32,33,34,37,38,40,41,42,43,47,48,49,50,51,59,60,61,62,63,],[-5,23,44,46,-8,-9,-7,-6,-32,-35,-26,-33,-34,-27,-12,-11,-10,-37,-36,-29,-31,-28,-30,]),'NUMBER':([25,29,36,39,53,54,55,56,],[37,37,37,37,37,37,37,37,]),'AMPERSAND':([21,25,29,31,36,39,53,54,55,56,],[31,31,31,31,31,31,31,31,31,31,]),'DIVIDE':([11,32,33,34,37,38,40,41,42,43,47,48,49,50,51,52,59,60,61,62,63,],[-5,-8,-9,-7,-6,-32,-35,54,-33,-34,54,-12,-11,-10,-37,54,-36,54,-31,54,-30,]),'INT':([7,10,14,16,17,30,45,],[9,-16,9,-17,-15,-23,-18,]),'LPAREN':([4,25,29,36,39,53,54,55,56,],[5,39,39,39,39,39,39,39,39,]),'RPAREN':([5,11,32,33,34,37,38,40,42,43,48,49,50,51,52,59,60,61,62,63,],[6,-5,-8,-9,-7,-6,-32,-35,-33,-34,-12,-11,-10,-37,59,-36,-29,-31,-28,-30,]),'$end':([2,3,22,],[-1,0,-2,]),'EQUALS':([11,15,19,32,33,34,48,49,50,],[-5,25,29,-8,-9,-7,-12,-11,-10,]),'MINUS':([11,25,29,32,33,34,36,37,38,39,40,41,42,43,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,],[-5,36,36,-8,-9,-7,36,-6,-32,36,-35,53,-33,-34,53,-12,-11,-10,-37,53,36,36,36,36,-36,-29,-31,-28,-30,]),'TIMES':([7,9,10,11,12,14,16,17,18,21,23,25,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,61,62,63,],[21,-3,-16,-5,-4,21,-17,-15,21,21,21,21,21,-23,21,-8,-9,-7,21,-6,-32,21,-35,56,-33,-34,21,-18,21,56,-12,-11,-10,-37,56,21,21,21,21,-36,56,-31,56,-30,]),'RBRACE':([7,8,10,14,16,17,24,30,45,],[-14,22,-16,-14,-17,-15,-13,-23,-18,]),'SEMICOLON':([11,13,20,26,27,28,32,33,34,35,37,38,40,41,42,43,47,48,49,50,51,57,58,59,60,61,62,63,],[-5,-25,30,-21,45,-22,-8,-9,-7,-24,-6,-32,-35,-26,-33,-34,-27,-12,-11,-10,-37,-20,-19,-36,-29,-31,-28,-30,]),'PLUS':([11,32,33,34,37,38,40,41,42,43,47,48,49,50,51,52,59,60,61,62,63,],[-5,-8,-9,-7,-6,-32,-35,55,-33,-34,55,-12,-11,-10,-37,55,-36,-29,-31,-28,-30,]),'ID':([7,9,10,12,14,16,17,18,21,23,25,29,30,31,36,39,44,45,46,53,54,55,56,],[11,-3,-16,-4,11,-17,-15,26,11,11,11,11,-23,11,11,11,26,-18,26,11,11,11,11,]),'COMMENT':([7,10,14,16,17,30,45,],[16,-16,16,-17,-15,-23,-18,]),'MAIN':([1,],[4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([7,14,23,],[13,13,13,]),'statements':([7,14,],[8,24,]),'assignmentlist':([7,14,23,],[20,20,35,]),'statement':([7,14,],[14,14,]),'pointer':([7,14,18,21,23,25,29,31,36,39,44,46,53,54,55,56,],[15,15,28,34,15,38,38,50,38,38,28,28,38,38,38,38,]),'expression':([25,29,36,39,53,54,55,56,],[41,47,51,52,60,61,62,63,]),'idlist':([18,44,46,],[27,57,58,]),'start':([0,],[3,]),'declaration':([7,14,],[17,17,]),'type':([7,14,],[18,18,]),'var':([7,14,21,23,25,29,31,36,39,53,54,55,56,],[19,19,33,19,40,40,48,40,40,40,40,40,40,]),'function':([0,],[2,]),'address':([21,25,29,31,36,39,53,54,55,56,],[32,42,42,49,42,42,42,42,42,42,]),'xassignment':([7,14,],[10,10,]),'const':([25,29,36,39,53,54,55,56,],[43,43,43,43,43,43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> function','start',1,'p_start','assign2.py',85),
  ('function -> VOID MAIN LPAREN RPAREN LBRACE statements RBRACE','function',7,'p_function','assign2.py',98),
  ('type -> INT','type',1,'p_function','assign2.py',99),
  ('type -> VOID','type',1,'p_function','assign2.py',100),
  ('var -> ID','var',1,'p_var','assign2.py',115),
  ('const -> NUMBER','const',1,'p_const','assign2.py',121),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','assign2.py',128),
  ('pointer -> TIMES address','pointer',2,'p_pointer','assign2.py',129),
  ('pointer -> TIMES var','pointer',2,'p_pointer','assign2.py',130),
  ('address -> AMPERSAND pointer','address',2,'p_address','assign2.py',136),
  ('address -> AMPERSAND address','address',2,'p_address','assign2.py',137),
  ('address -> AMPERSAND var','address',2,'p_address','assign2.py',138),
  ('statements -> statement statements','statements',2,'p_statements','assign2.py',144),
  ('statements -> <empty>','statements',0,'p_statements','assign2.py',145),
  ('statement -> declaration','statement',1,'p_statements','assign2.py',146),
  ('statement -> xassignment','statement',1,'p_statements','assign2.py',147),
  ('statement -> COMMENT','statement',1,'p_statements','assign2.py',148),
  ('declaration -> type idlist SEMICOLON','declaration',3,'p_declaration','assign2.py',154),
  ('idlist -> pointer COMMA idlist','idlist',3,'p_idlist','assign2.py',160),
  ('idlist -> ID COMMA idlist','idlist',3,'p_idlist','assign2.py',161),
  ('idlist -> ID','idlist',1,'p_idlist','assign2.py',162),
  ('idlist -> pointer','idlist',1,'p_idlist','assign2.py',163),
  ('xassignment -> assignmentlist SEMICOLON','xassignment',2,'p_xassignment','assign2.py',169),
  ('assignmentlist -> assignment COMMA assignmentlist','assignmentlist',3,'p_assignmentlist','assign2.py',175),
  ('assignmentlist -> assignment','assignmentlist',1,'p_assignmentlist','assign2.py',176),
  ('assignment -> pointer EQUALS expression','assignment',3,'p_assignment','assign2.py',182),
  ('assignment -> var EQUALS expression','assignment',3,'p_assignment','assign2.py',183),
  ('expression -> expression PLUS expression','expression',3,'p_expression','assign2.py',190),
  ('expression -> expression MINUS expression','expression',3,'p_expression','assign2.py',191),
  ('expression -> expression TIMES expression','expression',3,'p_expression','assign2.py',192),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','assign2.py',193),
  ('expression -> pointer','expression',1,'p_expression','assign2.py',194),
  ('expression -> address','expression',1,'p_expression','assign2.py',195),
  ('expression -> const','expression',1,'p_expression','assign2.py',196),
  ('expression -> var','expression',1,'p_expression','assign2.py',197),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','assign2.py',198),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','assign2.py',215),
]
