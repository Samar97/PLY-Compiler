Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations funcdefs
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> declarations funcproto
Rule 4     declarations -> <empty>
Rule 5     funcdefs -> function funcdefs
Rule 6     funcdefs -> function
Rule 7     funcproto -> ftypename LPAREN args RPAREN SEMICOLON
Rule 8     ftypename -> type fname
Rule 9     function -> ftypename LPAREN dargs statements RBRACE
Rule 10    dargs -> args RPAREN LBRACE
Rule 11    type -> INT
Rule 12    type -> VOID
Rule 13    type -> FLOAT
Rule 14    main -> MAIN
Rule 15    fname -> var
Rule 16    fname -> pointer
Rule 17    fname -> main
Rule 18    args -> arg argcomp
Rule 19    args -> <empty>
Rule 20    argcomp -> COMMA arg argcomp
Rule 21    argcomp -> <empty>
Rule 22    arg -> type param
Rule 23    param -> var
Rule 24    param -> pointer
Rule 25    param -> address
Rule 26    var -> ID
Rule 27    const -> NUMBER
Rule 28    const -> FLOATNUM
Rule 29    pointer -> TIMES pointer
Rule 30    pointer -> TIMES address
Rule 31    pointer -> TIMES var
Rule 32    address -> AMPERSAND var
Rule 33    voidfuncall -> funcall SEMICOLON
Rule 34    funcall -> var LPAREN params RPAREN
Rule 35    params -> callparam paramcomp
Rule 36    params -> <empty>
Rule 37    paramcomp -> COMMA callparam paramcomp
Rule 38    paramcomp -> <empty>
Rule 39    callparam -> expression
Rule 40    statements -> statement statements
Rule 41    statements -> COMMENT statements
Rule 42    statements -> declaration statements
Rule 43    statements -> voidfuncall statements
Rule 44    statements -> retstatement statements
Rule 45    statements -> <empty>
Rule 46    statement -> assignment
Rule 47    statement -> ifstatement
Rule 48    statement -> whilestatement
Rule 49    retstatement -> RETURN expression SEMICOLON
Rule 50    retstatement -> RETURN SEMICOLON
Rule 51    declaration -> type idlist SEMICOLON
Rule 52    idlist -> decl_var COMMA idlist
Rule 53    idlist -> decl_var
Rule 54    decl_var -> var
Rule 55    decl_var -> pointer
Rule 56    assignment -> pointer EQUALS expression SEMICOLON
Rule 57    assignment -> var EQUALS expression SEMICOLON
Rule 58    condition -> expression LT expression
Rule 59    condition -> expression GT expression
Rule 60    condition -> expression LE expression
Rule 61    condition -> expression GE expression
Rule 62    condition -> expression EQ expression
Rule 63    condition -> expression NE expression
Rule 64    condition -> condition AND condition
Rule 65    condition -> condition OR condition
Rule 66    condition -> NOT condition
Rule 67    condition -> LPAREN condition RPAREN
Rule 68    controlbody -> LBRACE statements RBRACE
Rule 69    controlbody -> statement
Rule 70    controlbody -> SEMICOLON
Rule 71    ifstatement -> IF LPAREN condition RPAREN controlbody
Rule 72    ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody
Rule 73    whilestatement -> WHILE LPAREN condition RPAREN controlbody
Rule 74    expression -> expression PLUS expression
Rule 75    expression -> expression MINUS expression
Rule 76    expression -> expression TIMES expression
Rule 77    expression -> expression DIVIDE expression
Rule 78    expression -> pointer
Rule 79    expression -> address
Rule 80    expression -> const
Rule 81    expression -> var
Rule 82    expression -> funcall
Rule 83    expression -> LPAREN expression RPAREN
Rule 84    expression -> MINUS expression

Terminals, with rules where they appear

AMPERSAND            : 32
AND                  : 64
COMMA                : 20 37 52
COMMENT              : 41
DIVIDE               : 77
ELSE                 : 72
EQ                   : 62
EQUALS               : 56 57
FLOAT                : 13
FLOATNUM             : 28
GE                   : 61
GT                   : 59
ID                   : 26
IF                   : 71 72
INT                  : 11
LBRACE               : 10 68
LE                   : 60
LPAREN               : 7 9 34 67 71 72 73 83
LT                   : 58
MAIN                 : 14
MINUS                : 75 84
NE                   : 63
NOT                  : 66
NUMBER               : 27
OR                   : 65
PLUS                 : 74
RBRACE               : 9 68
RETURN               : 49 50
RPAREN               : 7 10 34 67 71 72 73 83
SEMICOLON            : 7 33 49 50 51 56 57 70
TIMES                : 29 30 31 76
VOID                 : 12
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

address              : 25 30 79
arg                  : 18 20
argcomp              : 18 20
args                 : 7 10
assignment           : 46
callparam            : 35 37
condition            : 64 64 65 65 66 67 71 72 73
const                : 80
controlbody          : 71 72 72 73
dargs                : 9
decl_var             : 52 53
declaration          : 2 42
declarations         : 1 2 3
expression           : 39 49 56 57 58 58 59 59 60 60 61 61 62 62 63 63 74 74 75 75 76 76 77 77 83 84
fname                : 8
ftypename            : 7 9
funcall              : 33 82
funcdefs             : 1 5
funcproto            : 3
function             : 5 6
idlist               : 51 52
ifstatement          : 47
main                 : 17
param                : 22
paramcomp            : 35 37
params               : 34
pointer              : 16 24 29 55 56 78
program              : 0
retstatement         : 44
statement            : 40 69
statements           : 9 40 41 42 43 44 68
type                 : 8 22 51
var                  : 15 23 31 32 34 54 57 81
voidfuncall          : 43
whilestatement       : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations funcdefs
    (2) declarations -> . declarations declaration
    (3) declarations -> . declarations funcproto
    (4) declarations -> .

    INT             reduce using rule 4 (declarations -> .)
    VOID            reduce using rule 4 (declarations -> .)
    FLOAT           reduce using rule 4 (declarations -> .)

    declarations                   shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> declarations . funcdefs
    (2) declarations -> declarations . declaration
    (3) declarations -> declarations . funcproto
    (5) funcdefs -> . function funcdefs
    (6) funcdefs -> . function
    (51) declaration -> . type idlist SEMICOLON
    (7) funcproto -> . ftypename LPAREN args RPAREN SEMICOLON
    (9) function -> . ftypename LPAREN dargs statements RBRACE
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (8) ftypename -> . type fname

    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10

    declaration                    shift and go to state 4
    type                           shift and go to state 5
    funcproto                      shift and go to state 7
    function                       shift and go to state 8
    funcdefs                       shift and go to state 9
    ftypename                      shift and go to state 11

state 2

    (0) S' -> program .



state 3

    (11) type -> INT .

    ID              reduce using rule 11 (type -> INT .)
    TIMES           reduce using rule 11 (type -> INT .)
    AMPERSAND       reduce using rule 11 (type -> INT .)
    MAIN            reduce using rule 11 (type -> INT .)


state 4

    (2) declarations -> declarations declaration .

    INT             reduce using rule 2 (declarations -> declarations declaration .)
    VOID            reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)


state 5

    (51) declaration -> type . idlist SEMICOLON
    (8) ftypename -> type . fname
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (15) fname -> . var
    (16) fname -> . pointer
    (17) fname -> . main
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (14) main -> . MAIN

    ID              shift and go to state 13
    TIMES           shift and go to state 14
    MAIN            shift and go to state 15

    decl_var                       shift and go to state 16
    idlist                         shift and go to state 12
    var                            shift and go to state 17
    pointer                        shift and go to state 18
    main                           shift and go to state 19
    fname                          shift and go to state 20

state 6

    (12) type -> VOID .

    ID              reduce using rule 12 (type -> VOID .)
    TIMES           reduce using rule 12 (type -> VOID .)
    AMPERSAND       reduce using rule 12 (type -> VOID .)
    MAIN            reduce using rule 12 (type -> VOID .)


state 7

    (3) declarations -> declarations funcproto .

    INT             reduce using rule 3 (declarations -> declarations funcproto .)
    VOID            reduce using rule 3 (declarations -> declarations funcproto .)
    FLOAT           reduce using rule 3 (declarations -> declarations funcproto .)


state 8

    (5) funcdefs -> function . funcdefs
    (6) funcdefs -> function .
    (5) funcdefs -> . function funcdefs
    (6) funcdefs -> . function
    (9) function -> . ftypename LPAREN dargs statements RBRACE
    (8) ftypename -> . type fname
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT

    $end            reduce using rule 6 (funcdefs -> function .)
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10

    type                           shift and go to state 21
    funcdefs                       shift and go to state 22
    ftypename                      shift and go to state 23
    function                       shift and go to state 8

state 9

    (1) program -> declarations funcdefs .

    $end            reduce using rule 1 (program -> declarations funcdefs .)


state 10

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)
    TIMES           reduce using rule 13 (type -> FLOAT .)
    AMPERSAND       reduce using rule 13 (type -> FLOAT .)
    MAIN            reduce using rule 13 (type -> FLOAT .)


state 11

    (7) funcproto -> ftypename . LPAREN args RPAREN SEMICOLON
    (9) function -> ftypename . LPAREN dargs statements RBRACE

    LPAREN          shift and go to state 24


state 12

    (51) declaration -> type idlist . SEMICOLON

    SEMICOLON       shift and go to state 25


state 13

    (26) var -> ID .

    EQUALS          reduce using rule 26 (var -> ID .)
    LPAREN          reduce using rule 26 (var -> ID .)
    COMMA           reduce using rule 26 (var -> ID .)
    SEMICOLON       reduce using rule 26 (var -> ID .)
    RPAREN          reduce using rule 26 (var -> ID .)
    PLUS            reduce using rule 26 (var -> ID .)
    MINUS           reduce using rule 26 (var -> ID .)
    TIMES           reduce using rule 26 (var -> ID .)
    DIVIDE          reduce using rule 26 (var -> ID .)
    LT              reduce using rule 26 (var -> ID .)
    GT              reduce using rule 26 (var -> ID .)
    LE              reduce using rule 26 (var -> ID .)
    GE              reduce using rule 26 (var -> ID .)
    EQ              reduce using rule 26 (var -> ID .)
    NE              reduce using rule 26 (var -> ID .)
    AND             reduce using rule 26 (var -> ID .)
    OR              reduce using rule 26 (var -> ID .)


state 14

    (29) pointer -> TIMES . pointer
    (30) pointer -> TIMES . address
    (31) pointer -> TIMES . var
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (26) var -> . ID

    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    ID              shift and go to state 13

    var                            shift and go to state 26
    address                        shift and go to state 27
    pointer                        shift and go to state 28

state 15

    (14) main -> MAIN .

    LPAREN          reduce using rule 14 (main -> MAIN .)


state 16

    (52) idlist -> decl_var . COMMA idlist
    (53) idlist -> decl_var .

    COMMA           shift and go to state 30
    SEMICOLON       reduce using rule 53 (idlist -> decl_var .)


state 17

    (15) fname -> var .
    (54) decl_var -> var .

    LPAREN          reduce using rule 15 (fname -> var .)
    COMMA           reduce using rule 54 (decl_var -> var .)
    SEMICOLON       reduce using rule 54 (decl_var -> var .)


state 18

    (16) fname -> pointer .
    (55) decl_var -> pointer .

    LPAREN          reduce using rule 16 (fname -> pointer .)
    COMMA           reduce using rule 55 (decl_var -> pointer .)
    SEMICOLON       reduce using rule 55 (decl_var -> pointer .)


state 19

    (17) fname -> main .

    LPAREN          reduce using rule 17 (fname -> main .)


state 20

    (8) ftypename -> type fname .

    LPAREN          reduce using rule 8 (ftypename -> type fname .)


state 21

    (8) ftypename -> type . fname
    (15) fname -> . var
    (16) fname -> . pointer
    (17) fname -> . main
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (14) main -> . MAIN

    ID              shift and go to state 13
    TIMES           shift and go to state 14
    MAIN            shift and go to state 15

    var                            shift and go to state 31
    pointer                        shift and go to state 32
    main                           shift and go to state 19
    fname                          shift and go to state 20

state 22

    (5) funcdefs -> function funcdefs .

    $end            reduce using rule 5 (funcdefs -> function funcdefs .)


state 23

    (9) function -> ftypename . LPAREN dargs statements RBRACE

    LPAREN          shift and go to state 33


state 24

    (7) funcproto -> ftypename LPAREN . args RPAREN SEMICOLON
    (9) function -> ftypename LPAREN . dargs statements RBRACE
    (18) args -> . arg argcomp
    (19) args -> .
    (10) dargs -> . args RPAREN LBRACE
    (22) arg -> . type param
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT

    RPAREN          reduce using rule 19 (args -> .)
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10

    args                           shift and go to state 34
    type                           shift and go to state 35
    dargs                          shift and go to state 36
    arg                            shift and go to state 37

state 25

    (51) declaration -> type idlist SEMICOLON .

    COMMENT         reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    RETURN          reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    IF              reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    WHILE           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    INT             reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    VOID            reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    FLOAT           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    TIMES           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    ID              reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    RBRACE          reduce using rule 51 (declaration -> type idlist SEMICOLON .)


state 26

    (31) pointer -> TIMES var .

    PLUS            reduce using rule 31 (pointer -> TIMES var .)
    MINUS           reduce using rule 31 (pointer -> TIMES var .)
    TIMES           reduce using rule 31 (pointer -> TIMES var .)
    DIVIDE          reduce using rule 31 (pointer -> TIMES var .)
    SEMICOLON       reduce using rule 31 (pointer -> TIMES var .)
    LT              reduce using rule 31 (pointer -> TIMES var .)
    GT              reduce using rule 31 (pointer -> TIMES var .)
    LE              reduce using rule 31 (pointer -> TIMES var .)
    GE              reduce using rule 31 (pointer -> TIMES var .)
    EQ              reduce using rule 31 (pointer -> TIMES var .)
    NE              reduce using rule 31 (pointer -> TIMES var .)
    COMMA           reduce using rule 31 (pointer -> TIMES var .)
    RPAREN          reduce using rule 31 (pointer -> TIMES var .)
    AND             reduce using rule 31 (pointer -> TIMES var .)
    OR              reduce using rule 31 (pointer -> TIMES var .)
    LPAREN          reduce using rule 31 (pointer -> TIMES var .)
    EQUALS          reduce using rule 31 (pointer -> TIMES var .)


state 27

    (30) pointer -> TIMES address .

    PLUS            reduce using rule 30 (pointer -> TIMES address .)
    MINUS           reduce using rule 30 (pointer -> TIMES address .)
    TIMES           reduce using rule 30 (pointer -> TIMES address .)
    DIVIDE          reduce using rule 30 (pointer -> TIMES address .)
    SEMICOLON       reduce using rule 30 (pointer -> TIMES address .)
    LT              reduce using rule 30 (pointer -> TIMES address .)
    GT              reduce using rule 30 (pointer -> TIMES address .)
    LE              reduce using rule 30 (pointer -> TIMES address .)
    GE              reduce using rule 30 (pointer -> TIMES address .)
    EQ              reduce using rule 30 (pointer -> TIMES address .)
    NE              reduce using rule 30 (pointer -> TIMES address .)
    COMMA           reduce using rule 30 (pointer -> TIMES address .)
    RPAREN          reduce using rule 30 (pointer -> TIMES address .)
    AND             reduce using rule 30 (pointer -> TIMES address .)
    OR              reduce using rule 30 (pointer -> TIMES address .)
    LPAREN          reduce using rule 30 (pointer -> TIMES address .)
    EQUALS          reduce using rule 30 (pointer -> TIMES address .)


state 28

    (29) pointer -> TIMES pointer .

    PLUS            reduce using rule 29 (pointer -> TIMES pointer .)
    MINUS           reduce using rule 29 (pointer -> TIMES pointer .)
    TIMES           reduce using rule 29 (pointer -> TIMES pointer .)
    DIVIDE          reduce using rule 29 (pointer -> TIMES pointer .)
    SEMICOLON       reduce using rule 29 (pointer -> TIMES pointer .)
    LT              reduce using rule 29 (pointer -> TIMES pointer .)
    GT              reduce using rule 29 (pointer -> TIMES pointer .)
    LE              reduce using rule 29 (pointer -> TIMES pointer .)
    GE              reduce using rule 29 (pointer -> TIMES pointer .)
    EQ              reduce using rule 29 (pointer -> TIMES pointer .)
    NE              reduce using rule 29 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 29 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 29 (pointer -> TIMES pointer .)
    AND             reduce using rule 29 (pointer -> TIMES pointer .)
    OR              reduce using rule 29 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 29 (pointer -> TIMES pointer .)
    EQUALS          reduce using rule 29 (pointer -> TIMES pointer .)


state 29

    (32) address -> AMPERSAND . var
    (26) var -> . ID

    ID              shift and go to state 13

    var                            shift and go to state 38

state 30

    (52) idlist -> decl_var COMMA . idlist
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var

    ID              shift and go to state 13
    TIMES           shift and go to state 14

    decl_var                       shift and go to state 16
    var                            shift and go to state 40
    idlist                         shift and go to state 39
    pointer                        shift and go to state 41

state 31

    (15) fname -> var .

    LPAREN          reduce using rule 15 (fname -> var .)


state 32

    (16) fname -> pointer .

    LPAREN          reduce using rule 16 (fname -> pointer .)


state 33

    (9) function -> ftypename LPAREN . dargs statements RBRACE
    (10) dargs -> . args RPAREN LBRACE
    (18) args -> . arg argcomp
    (19) args -> .
    (22) arg -> . type param
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT

    RPAREN          reduce using rule 19 (args -> .)
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10

    args                           shift and go to state 42
    type                           shift and go to state 35
    dargs                          shift and go to state 36
    arg                            shift and go to state 37

state 34

    (7) funcproto -> ftypename LPAREN args . RPAREN SEMICOLON
    (10) dargs -> args . RPAREN LBRACE

    RPAREN          shift and go to state 43


state 35

    (22) arg -> type . param
    (23) param -> . var
    (24) param -> . pointer
    (25) param -> . address
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var

    ID              shift and go to state 13
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29

    var                            shift and go to state 45
    param                          shift and go to state 44
    address                        shift and go to state 46
    pointer                        shift and go to state 47

state 36

    (9) function -> ftypename LPAREN dargs . statements RBRACE
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 58
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 37

    (18) args -> arg . argcomp
    (20) argcomp -> . COMMA arg argcomp
    (21) argcomp -> .

    COMMA           shift and go to state 64
    RPAREN          reduce using rule 21 (argcomp -> .)

    argcomp                        shift and go to state 65

state 38

    (32) address -> AMPERSAND var .

    PLUS            reduce using rule 32 (address -> AMPERSAND var .)
    MINUS           reduce using rule 32 (address -> AMPERSAND var .)
    TIMES           reduce using rule 32 (address -> AMPERSAND var .)
    DIVIDE          reduce using rule 32 (address -> AMPERSAND var .)
    RPAREN          reduce using rule 32 (address -> AMPERSAND var .)
    AND             reduce using rule 32 (address -> AMPERSAND var .)
    OR              reduce using rule 32 (address -> AMPERSAND var .)
    SEMICOLON       reduce using rule 32 (address -> AMPERSAND var .)
    LT              reduce using rule 32 (address -> AMPERSAND var .)
    GT              reduce using rule 32 (address -> AMPERSAND var .)
    LE              reduce using rule 32 (address -> AMPERSAND var .)
    GE              reduce using rule 32 (address -> AMPERSAND var .)
    EQ              reduce using rule 32 (address -> AMPERSAND var .)
    NE              reduce using rule 32 (address -> AMPERSAND var .)
    COMMA           reduce using rule 32 (address -> AMPERSAND var .)
    LPAREN          reduce using rule 32 (address -> AMPERSAND var .)
    EQUALS          reduce using rule 32 (address -> AMPERSAND var .)


state 39

    (52) idlist -> decl_var COMMA idlist .

    SEMICOLON       reduce using rule 52 (idlist -> decl_var COMMA idlist .)


state 40

    (54) decl_var -> var .

    COMMA           reduce using rule 54 (decl_var -> var .)
    SEMICOLON       reduce using rule 54 (decl_var -> var .)


state 41

    (55) decl_var -> pointer .

    COMMA           reduce using rule 55 (decl_var -> pointer .)
    SEMICOLON       reduce using rule 55 (decl_var -> pointer .)


state 42

    (10) dargs -> args . RPAREN LBRACE

    RPAREN          shift and go to state 66


state 43

    (7) funcproto -> ftypename LPAREN args RPAREN . SEMICOLON
    (10) dargs -> args RPAREN . LBRACE

    SEMICOLON       shift and go to state 68
    LBRACE          shift and go to state 67


state 44

    (22) arg -> type param .

    COMMA           reduce using rule 22 (arg -> type param .)
    RPAREN          reduce using rule 22 (arg -> type param .)


state 45

    (23) param -> var .

    COMMA           reduce using rule 23 (param -> var .)
    RPAREN          reduce using rule 23 (param -> var .)


state 46

    (25) param -> address .

    COMMA           reduce using rule 25 (param -> address .)
    RPAREN          reduce using rule 25 (param -> address .)


state 47

    (24) param -> pointer .

    COMMA           reduce using rule 24 (param -> pointer .)
    RPAREN          reduce using rule 24 (param -> pointer .)


state 48

    (41) statements -> COMMENT . statements
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 69
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 49

    (42) statements -> declaration . statements
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 70
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 50

    (71) ifstatement -> IF . LPAREN condition RPAREN controlbody
    (72) ifstatement -> IF . LPAREN condition RPAREN controlbody ELSE controlbody

    LPAREN          shift and go to state 71


state 51

    (57) assignment -> var . EQUALS expression SEMICOLON
    (34) funcall -> var . LPAREN params RPAREN

    EQUALS          shift and go to state 73
    LPAREN          shift and go to state 72


state 52

    (56) assignment -> pointer . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 74


state 53

    (49) retstatement -> RETURN . expression SEMICOLON
    (50) retstatement -> RETURN . SEMICOLON
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    SEMICOLON       shift and go to state 81
    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 80
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 54

    (73) whilestatement -> WHILE . LPAREN condition RPAREN controlbody

    LPAREN          shift and go to state 86


state 55

    (51) declaration -> type . idlist SEMICOLON
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var

    ID              shift and go to state 13
    TIMES           shift and go to state 14

    decl_var                       shift and go to state 16
    idlist                         shift and go to state 12
    var                            shift and go to state 40
    pointer                        shift and go to state 41

state 56

    (46) statement -> assignment .

    COMMENT         reduce using rule 46 (statement -> assignment .)
    RETURN          reduce using rule 46 (statement -> assignment .)
    IF              reduce using rule 46 (statement -> assignment .)
    WHILE           reduce using rule 46 (statement -> assignment .)
    INT             reduce using rule 46 (statement -> assignment .)
    VOID            reduce using rule 46 (statement -> assignment .)
    FLOAT           reduce using rule 46 (statement -> assignment .)
    TIMES           reduce using rule 46 (statement -> assignment .)
    ID              reduce using rule 46 (statement -> assignment .)
    RBRACE          reduce using rule 46 (statement -> assignment .)
    ELSE            reduce using rule 46 (statement -> assignment .)


state 57

    (48) statement -> whilestatement .

    COMMENT         reduce using rule 48 (statement -> whilestatement .)
    RETURN          reduce using rule 48 (statement -> whilestatement .)
    IF              reduce using rule 48 (statement -> whilestatement .)
    WHILE           reduce using rule 48 (statement -> whilestatement .)
    INT             reduce using rule 48 (statement -> whilestatement .)
    VOID            reduce using rule 48 (statement -> whilestatement .)
    FLOAT           reduce using rule 48 (statement -> whilestatement .)
    TIMES           reduce using rule 48 (statement -> whilestatement .)
    ID              reduce using rule 48 (statement -> whilestatement .)
    RBRACE          reduce using rule 48 (statement -> whilestatement .)
    ELSE            reduce using rule 48 (statement -> whilestatement .)


state 58

    (9) function -> ftypename LPAREN dargs statements . RBRACE

    RBRACE          shift and go to state 87


state 59

    (47) statement -> ifstatement .

    COMMENT         reduce using rule 47 (statement -> ifstatement .)
    RETURN          reduce using rule 47 (statement -> ifstatement .)
    IF              reduce using rule 47 (statement -> ifstatement .)
    WHILE           reduce using rule 47 (statement -> ifstatement .)
    INT             reduce using rule 47 (statement -> ifstatement .)
    VOID            reduce using rule 47 (statement -> ifstatement .)
    FLOAT           reduce using rule 47 (statement -> ifstatement .)
    TIMES           reduce using rule 47 (statement -> ifstatement .)
    ID              reduce using rule 47 (statement -> ifstatement .)
    RBRACE          reduce using rule 47 (statement -> ifstatement .)
    ELSE            reduce using rule 47 (statement -> ifstatement .)


state 60

    (33) voidfuncall -> funcall . SEMICOLON

    SEMICOLON       shift and go to state 88


state 61

    (43) statements -> voidfuncall . statements
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 89
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 62

    (40) statements -> statement . statements
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 90
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 63

    (44) statements -> retstatement . statements
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 91
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 64

    (20) argcomp -> COMMA . arg argcomp
    (22) arg -> . type param
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT

    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10

    arg                            shift and go to state 92
    type                           shift and go to state 35

state 65

    (18) args -> arg argcomp .

    RPAREN          reduce using rule 18 (args -> arg argcomp .)


state 66

    (10) dargs -> args RPAREN . LBRACE

    LBRACE          shift and go to state 67


state 67

    (10) dargs -> args RPAREN LBRACE .

    COMMENT         reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    RETURN          reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    IF              reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    WHILE           reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    INT             reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    VOID            reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    FLOAT           reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    TIMES           reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    ID              reduce using rule 10 (dargs -> args RPAREN LBRACE .)
    RBRACE          reduce using rule 10 (dargs -> args RPAREN LBRACE .)


state 68

    (7) funcproto -> ftypename LPAREN args RPAREN SEMICOLON .

    INT             reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)
    VOID            reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)
    FLOAT           reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)


state 69

    (41) statements -> COMMENT statements .

    RBRACE          reduce using rule 41 (statements -> COMMENT statements .)


state 70

    (42) statements -> declaration statements .

    RBRACE          reduce using rule 42 (statements -> declaration statements .)


state 71

    (71) ifstatement -> IF LPAREN . condition RPAREN controlbody
    (72) ifstatement -> IF LPAREN . condition RPAREN controlbody ELSE controlbody
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 93
    funcall                        shift and go to state 82
    var                            shift and go to state 83
    expression                     shift and go to state 95
    address                        shift and go to state 79
    pointer                        shift and go to state 84

state 72

    (34) funcall -> var LPAREN . params RPAREN
    (35) params -> . callparam paramcomp
    (36) params -> .
    (39) callparam -> . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    RPAREN          reduce using rule 36 (params -> .)
    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    expression                     shift and go to state 99
    const                          shift and go to state 78
    params                         shift and go to state 97
    var                            shift and go to state 83
    funcall                        shift and go to state 82
    callparam                      shift and go to state 98
    pointer                        shift and go to state 84
    address                        shift and go to state 79

state 73

    (57) assignment -> var EQUALS . expression SEMICOLON
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    expression                     shift and go to state 100
    funcall                        shift and go to state 82
    var                            shift and go to state 83
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    const                          shift and go to state 78

state 74

    (56) assignment -> pointer EQUALS . expression SEMICOLON
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 101
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 75

    (28) const -> FLOATNUM .

    PLUS            reduce using rule 28 (const -> FLOATNUM .)
    MINUS           reduce using rule 28 (const -> FLOATNUM .)
    TIMES           reduce using rule 28 (const -> FLOATNUM .)
    DIVIDE          reduce using rule 28 (const -> FLOATNUM .)
    SEMICOLON       reduce using rule 28 (const -> FLOATNUM .)
    LT              reduce using rule 28 (const -> FLOATNUM .)
    GT              reduce using rule 28 (const -> FLOATNUM .)
    LE              reduce using rule 28 (const -> FLOATNUM .)
    GE              reduce using rule 28 (const -> FLOATNUM .)
    EQ              reduce using rule 28 (const -> FLOATNUM .)
    NE              reduce using rule 28 (const -> FLOATNUM .)
    COMMA           reduce using rule 28 (const -> FLOATNUM .)
    RPAREN          reduce using rule 28 (const -> FLOATNUM .)
    AND             reduce using rule 28 (const -> FLOATNUM .)
    OR              reduce using rule 28 (const -> FLOATNUM .)


state 76

    (84) expression -> MINUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 102
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 77

    (27) const -> NUMBER .

    PLUS            reduce using rule 27 (const -> NUMBER .)
    MINUS           reduce using rule 27 (const -> NUMBER .)
    TIMES           reduce using rule 27 (const -> NUMBER .)
    DIVIDE          reduce using rule 27 (const -> NUMBER .)
    SEMICOLON       reduce using rule 27 (const -> NUMBER .)
    LT              reduce using rule 27 (const -> NUMBER .)
    GT              reduce using rule 27 (const -> NUMBER .)
    LE              reduce using rule 27 (const -> NUMBER .)
    GE              reduce using rule 27 (const -> NUMBER .)
    EQ              reduce using rule 27 (const -> NUMBER .)
    NE              reduce using rule 27 (const -> NUMBER .)
    COMMA           reduce using rule 27 (const -> NUMBER .)
    RPAREN          reduce using rule 27 (const -> NUMBER .)
    AND             reduce using rule 27 (const -> NUMBER .)
    OR              reduce using rule 27 (const -> NUMBER .)


state 78

    (80) expression -> const .

    PLUS            reduce using rule 80 (expression -> const .)
    MINUS           reduce using rule 80 (expression -> const .)
    TIMES           reduce using rule 80 (expression -> const .)
    DIVIDE          reduce using rule 80 (expression -> const .)
    SEMICOLON       reduce using rule 80 (expression -> const .)
    LT              reduce using rule 80 (expression -> const .)
    GT              reduce using rule 80 (expression -> const .)
    LE              reduce using rule 80 (expression -> const .)
    GE              reduce using rule 80 (expression -> const .)
    EQ              reduce using rule 80 (expression -> const .)
    NE              reduce using rule 80 (expression -> const .)
    COMMA           reduce using rule 80 (expression -> const .)
    RPAREN          reduce using rule 80 (expression -> const .)
    AND             reduce using rule 80 (expression -> const .)
    OR              reduce using rule 80 (expression -> const .)


state 79

    (79) expression -> address .

    PLUS            reduce using rule 79 (expression -> address .)
    MINUS           reduce using rule 79 (expression -> address .)
    TIMES           reduce using rule 79 (expression -> address .)
    DIVIDE          reduce using rule 79 (expression -> address .)
    SEMICOLON       reduce using rule 79 (expression -> address .)
    LT              reduce using rule 79 (expression -> address .)
    GT              reduce using rule 79 (expression -> address .)
    LE              reduce using rule 79 (expression -> address .)
    GE              reduce using rule 79 (expression -> address .)
    EQ              reduce using rule 79 (expression -> address .)
    NE              reduce using rule 79 (expression -> address .)
    COMMA           reduce using rule 79 (expression -> address .)
    RPAREN          reduce using rule 79 (expression -> address .)
    AND             reduce using rule 79 (expression -> address .)
    OR              reduce using rule 79 (expression -> address .)


state 80

    (49) retstatement -> RETURN expression . SEMICOLON
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 104
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 81

    (50) retstatement -> RETURN SEMICOLON .

    COMMENT         reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    IF              reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    INT             reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    VOID            reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    ID              reduce using rule 50 (retstatement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 50 (retstatement -> RETURN SEMICOLON .)


state 82

    (82) expression -> funcall .

    PLUS            reduce using rule 82 (expression -> funcall .)
    MINUS           reduce using rule 82 (expression -> funcall .)
    TIMES           reduce using rule 82 (expression -> funcall .)
    DIVIDE          reduce using rule 82 (expression -> funcall .)
    SEMICOLON       reduce using rule 82 (expression -> funcall .)
    LT              reduce using rule 82 (expression -> funcall .)
    GT              reduce using rule 82 (expression -> funcall .)
    LE              reduce using rule 82 (expression -> funcall .)
    GE              reduce using rule 82 (expression -> funcall .)
    EQ              reduce using rule 82 (expression -> funcall .)
    NE              reduce using rule 82 (expression -> funcall .)
    COMMA           reduce using rule 82 (expression -> funcall .)
    RPAREN          reduce using rule 82 (expression -> funcall .)
    AND             reduce using rule 82 (expression -> funcall .)
    OR              reduce using rule 82 (expression -> funcall .)


state 83

    (81) expression -> var .
    (34) funcall -> var . LPAREN params RPAREN

    PLUS            reduce using rule 81 (expression -> var .)
    MINUS           reduce using rule 81 (expression -> var .)
    TIMES           reduce using rule 81 (expression -> var .)
    DIVIDE          reduce using rule 81 (expression -> var .)
    SEMICOLON       reduce using rule 81 (expression -> var .)
    LT              reduce using rule 81 (expression -> var .)
    GT              reduce using rule 81 (expression -> var .)
    LE              reduce using rule 81 (expression -> var .)
    GE              reduce using rule 81 (expression -> var .)
    EQ              reduce using rule 81 (expression -> var .)
    NE              reduce using rule 81 (expression -> var .)
    COMMA           reduce using rule 81 (expression -> var .)
    RPAREN          reduce using rule 81 (expression -> var .)
    AND             reduce using rule 81 (expression -> var .)
    OR              reduce using rule 81 (expression -> var .)
    LPAREN          shift and go to state 72


state 84

    (78) expression -> pointer .

    PLUS            reduce using rule 78 (expression -> pointer .)
    MINUS           reduce using rule 78 (expression -> pointer .)
    TIMES           reduce using rule 78 (expression -> pointer .)
    DIVIDE          reduce using rule 78 (expression -> pointer .)
    SEMICOLON       reduce using rule 78 (expression -> pointer .)
    LT              reduce using rule 78 (expression -> pointer .)
    GT              reduce using rule 78 (expression -> pointer .)
    LE              reduce using rule 78 (expression -> pointer .)
    GE              reduce using rule 78 (expression -> pointer .)
    EQ              reduce using rule 78 (expression -> pointer .)
    NE              reduce using rule 78 (expression -> pointer .)
    COMMA           reduce using rule 78 (expression -> pointer .)
    RPAREN          reduce using rule 78 (expression -> pointer .)
    AND             reduce using rule 78 (expression -> pointer .)
    OR              reduce using rule 78 (expression -> pointer .)


state 85

    (83) expression -> LPAREN . expression RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 108
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 86

    (73) whilestatement -> WHILE LPAREN . condition RPAREN controlbody
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 109
    funcall                        shift and go to state 82
    var                            shift and go to state 83
    expression                     shift and go to state 95
    address                        shift and go to state 79
    pointer                        shift and go to state 84

state 87

    (9) function -> ftypename LPAREN dargs statements RBRACE .

    INT             reduce using rule 9 (function -> ftypename LPAREN dargs statements RBRACE .)
    VOID            reduce using rule 9 (function -> ftypename LPAREN dargs statements RBRACE .)
    FLOAT           reduce using rule 9 (function -> ftypename LPAREN dargs statements RBRACE .)
    $end            reduce using rule 9 (function -> ftypename LPAREN dargs statements RBRACE .)


state 88

    (33) voidfuncall -> funcall SEMICOLON .

    COMMENT         reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    RETURN          reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    IF              reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    WHILE           reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    INT             reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    VOID            reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    FLOAT           reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    TIMES           reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    ID              reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)
    RBRACE          reduce using rule 33 (voidfuncall -> funcall SEMICOLON .)


state 89

    (43) statements -> voidfuncall statements .

    RBRACE          reduce using rule 43 (statements -> voidfuncall statements .)


state 90

    (40) statements -> statement statements .

    RBRACE          reduce using rule 40 (statements -> statement statements .)


state 91

    (44) statements -> retstatement statements .

    RBRACE          reduce using rule 44 (statements -> retstatement statements .)


state 92

    (20) argcomp -> COMMA arg . argcomp
    (20) argcomp -> . COMMA arg argcomp
    (21) argcomp -> .

    COMMA           shift and go to state 64
    RPAREN          reduce using rule 21 (argcomp -> .)

    argcomp                        shift and go to state 110

state 93

    (71) ifstatement -> IF LPAREN condition . RPAREN controlbody
    (72) ifstatement -> IF LPAREN condition . RPAREN controlbody ELSE controlbody
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113


state 94

    (67) condition -> LPAREN . condition RPAREN
    (83) expression -> LPAREN . expression RPAREN
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 114
    funcall                        shift and go to state 82
    expression                     shift and go to state 115
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 95

    (58) condition -> expression . LT expression
    (59) condition -> expression . GT expression
    (60) condition -> expression . LE expression
    (61) condition -> expression . GE expression
    (62) condition -> expression . EQ expression
    (63) condition -> expression . NE expression
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 117
    GE              shift and go to state 121
    EQ              shift and go to state 116
    NE              shift and go to state 120
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 96

    (66) condition -> NOT . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 122
    funcall                        shift and go to state 82
    expression                     shift and go to state 95
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 97

    (34) funcall -> var LPAREN params . RPAREN

    RPAREN          shift and go to state 123


state 98

    (35) params -> callparam . paramcomp
    (37) paramcomp -> . COMMA callparam paramcomp
    (38) paramcomp -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 38 (paramcomp -> .)

    paramcomp                      shift and go to state 125

state 99

    (39) callparam -> expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    COMMA           reduce using rule 39 (callparam -> expression .)
    RPAREN          reduce using rule 39 (callparam -> expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 100

    (57) assignment -> var EQUALS expression . SEMICOLON
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 126
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 101

    (56) assignment -> pointer EQUALS expression . SEMICOLON
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 127
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 102

    (84) expression -> MINUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 84 (expression -> MINUS expression .)
    MINUS           reduce using rule 84 (expression -> MINUS expression .)
    TIMES           reduce using rule 84 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 84 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 84 (expression -> MINUS expression .)
    LT              reduce using rule 84 (expression -> MINUS expression .)
    GT              reduce using rule 84 (expression -> MINUS expression .)
    LE              reduce using rule 84 (expression -> MINUS expression .)
    GE              reduce using rule 84 (expression -> MINUS expression .)
    EQ              reduce using rule 84 (expression -> MINUS expression .)
    NE              reduce using rule 84 (expression -> MINUS expression .)
    COMMA           reduce using rule 84 (expression -> MINUS expression .)
    RPAREN          reduce using rule 84 (expression -> MINUS expression .)
    AND             reduce using rule 84 (expression -> MINUS expression .)
    OR              reduce using rule 84 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]


state 103

    (74) expression -> expression PLUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 128
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 104

    (49) retstatement -> RETURN expression SEMICOLON .

    COMMENT         reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    VOID            reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 49 (retstatement -> RETURN expression SEMICOLON .)


state 105

    (75) expression -> expression MINUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 129
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 106

    (76) expression -> expression TIMES . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 130
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 107

    (77) expression -> expression DIVIDE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 131
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 108

    (83) expression -> LPAREN expression . RPAREN
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 132
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 109

    (73) whilestatement -> WHILE LPAREN condition . RPAREN controlbody
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 133
    AND             shift and go to state 112
    OR              shift and go to state 113


state 110

    (20) argcomp -> COMMA arg argcomp .

    RPAREN          reduce using rule 20 (argcomp -> COMMA arg argcomp .)


state 111

    (71) ifstatement -> IF LPAREN condition RPAREN . controlbody
    (72) ifstatement -> IF LPAREN condition RPAREN . controlbody ELSE controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 136
    SEMICOLON       shift and go to state 137
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    controlbody                    shift and go to state 135
    var                            shift and go to state 134
    assignment                     shift and go to state 56
    pointer                        shift and go to state 52
    whilestatement                 shift and go to state 57
    statement                      shift and go to state 138
    ifstatement                    shift and go to state 59

state 112

    (64) condition -> condition AND . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 139
    funcall                        shift and go to state 82
    expression                     shift and go to state 95
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 113

    (65) condition -> condition OR . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 96
    LPAREN          shift and go to state 94
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    condition                      shift and go to state 140
    funcall                        shift and go to state 82
    expression                     shift and go to state 95
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 114

    (67) condition -> LPAREN condition . RPAREN
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 141
    AND             shift and go to state 112
    OR              shift and go to state 113


state 115

    (83) expression -> LPAREN expression . RPAREN
    (58) condition -> expression . LT expression
    (59) condition -> expression . GT expression
    (60) condition -> expression . LE expression
    (61) condition -> expression . GE expression
    (62) condition -> expression . EQ expression
    (63) condition -> expression . NE expression
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 132
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 117
    GE              shift and go to state 121
    EQ              shift and go to state 116
    NE              shift and go to state 120
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 116

    (62) condition -> expression EQ . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 142
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 117

    (60) condition -> expression LE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 143
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 118

    (58) condition -> expression LT . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 144
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 119

    (59) condition -> expression GT . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 145
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 120

    (63) condition -> expression NE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 146
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 121

    (61) condition -> expression GE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 147
    address                        shift and go to state 79
    pointer                        shift and go to state 84
    var                            shift and go to state 83

state 122

    (66) condition -> NOT condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    AND             reduce using rule 66 (condition -> NOT condition .)
    OR              reduce using rule 66 (condition -> NOT condition .)
    RPAREN          reduce using rule 66 (condition -> NOT condition .)

  ! AND             [ shift and go to state 112 ]
  ! OR              [ shift and go to state 113 ]


state 123

    (34) funcall -> var LPAREN params RPAREN .

    PLUS            reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    MINUS           reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    TIMES           reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    DIVIDE          reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    COMMA           reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    RPAREN          reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    LT              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    GT              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    LE              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    GE              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    EQ              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    NE              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    AND             reduce using rule 34 (funcall -> var LPAREN params RPAREN .)
    OR              reduce using rule 34 (funcall -> var LPAREN params RPAREN .)


state 124

    (37) paramcomp -> COMMA . callparam paramcomp
    (39) callparam -> . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOATNUM
    (26) var -> . ID
    (34) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 85
    MINUS           shift and go to state 76
    TIMES           shift and go to state 14
    AMPERSAND       shift and go to state 29
    NUMBER          shift and go to state 77
    FLOATNUM        shift and go to state 75
    ID              shift and go to state 13

    const                          shift and go to state 78
    funcall                        shift and go to state 82
    expression                     shift and go to state 99
    callparam                      shift and go to state 148
    pointer                        shift and go to state 84
    address                        shift and go to state 79
    var                            shift and go to state 83

state 125

    (35) params -> callparam paramcomp .

    RPAREN          reduce using rule 35 (params -> callparam paramcomp .)


state 126

    (57) assignment -> var EQUALS expression SEMICOLON .

    COMMENT         reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    IF              reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    INT             reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    VOID            reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    ID              reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)


state 127

    (56) assignment -> pointer EQUALS expression SEMICOLON .

    COMMENT         reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    IF              reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    INT             reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    VOID            reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    ID              reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)


state 128

    (74) expression -> expression PLUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 74 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 74 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression PLUS expression .)
    LT              reduce using rule 74 (expression -> expression PLUS expression .)
    GT              reduce using rule 74 (expression -> expression PLUS expression .)
    LE              reduce using rule 74 (expression -> expression PLUS expression .)
    GE              reduce using rule 74 (expression -> expression PLUS expression .)
    EQ              reduce using rule 74 (expression -> expression PLUS expression .)
    NE              reduce using rule 74 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 74 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 74 (expression -> expression PLUS expression .)
    AND             reduce using rule 74 (expression -> expression PLUS expression .)
    OR              reduce using rule 74 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107

  ! TIMES           [ reduce using rule 74 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 105 ]


state 129

    (75) expression -> expression MINUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 75 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 75 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression MINUS expression .)
    LT              reduce using rule 75 (expression -> expression MINUS expression .)
    GT              reduce using rule 75 (expression -> expression MINUS expression .)
    LE              reduce using rule 75 (expression -> expression MINUS expression .)
    GE              reduce using rule 75 (expression -> expression MINUS expression .)
    EQ              reduce using rule 75 (expression -> expression MINUS expression .)
    NE              reduce using rule 75 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 75 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 75 (expression -> expression MINUS expression .)
    AND             reduce using rule 75 (expression -> expression MINUS expression .)
    OR              reduce using rule 75 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107

  ! TIMES           [ reduce using rule 75 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 105 ]


state 130

    (76) expression -> expression TIMES expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 76 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 76 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 76 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 76 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression TIMES expression .)
    LT              reduce using rule 76 (expression -> expression TIMES expression .)
    GT              reduce using rule 76 (expression -> expression TIMES expression .)
    LE              reduce using rule 76 (expression -> expression TIMES expression .)
    GE              reduce using rule 76 (expression -> expression TIMES expression .)
    EQ              reduce using rule 76 (expression -> expression TIMES expression .)
    NE              reduce using rule 76 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 76 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 76 (expression -> expression TIMES expression .)
    AND             reduce using rule 76 (expression -> expression TIMES expression .)
    OR              reduce using rule 76 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]


state 131

    (77) expression -> expression DIVIDE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 77 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 77 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 77 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 77 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 77 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 77 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 77 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 77 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 77 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 77 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 77 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 103 ]
  ! MINUS           [ shift and go to state 105 ]
  ! TIMES           [ shift and go to state 106 ]
  ! DIVIDE          [ shift and go to state 107 ]


state 132

    (83) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 83 (expression -> LPAREN expression RPAREN .)


state 133

    (73) whilestatement -> WHILE LPAREN condition RPAREN . controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 136
    SEMICOLON       shift and go to state 137
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    controlbody                    shift and go to state 149
    var                            shift and go to state 134
    assignment                     shift and go to state 56
    pointer                        shift and go to state 52
    whilestatement                 shift and go to state 57
    statement                      shift and go to state 138
    ifstatement                    shift and go to state 59

state 134

    (57) assignment -> var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 73


state 135

    (71) ifstatement -> IF LPAREN condition RPAREN controlbody .
    (72) ifstatement -> IF LPAREN condition RPAREN controlbody . ELSE controlbody

    COMMENT         reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    RETURN          reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    IF              reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    WHILE           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    INT             reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    VOID            reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    FLOAT           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    TIMES           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    ID              reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    RBRACE          reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    ELSE            shift and go to state 150

  ! ELSE            [ reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .) ]


state 136

    (68) controlbody -> LBRACE . statements RBRACE
    (40) statements -> . statement statements
    (41) statements -> . COMMENT statements
    (42) statements -> . declaration statements
    (43) statements -> . voidfuncall statements
    (44) statements -> . retstatement statements
    (45) statements -> .
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (33) voidfuncall -> . funcall SEMICOLON
    (49) retstatement -> . RETURN expression SEMICOLON
    (50) retstatement -> . RETURN SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (11) type -> . INT
    (12) type -> . VOID
    (13) type -> . FLOAT
    (34) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 48
    RBRACE          reduce using rule 45 (statements -> .)
    RETURN          shift and go to state 53
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    INT             shift and go to state 3
    VOID            shift and go to state 6
    FLOAT           shift and go to state 10
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    declaration                    shift and go to state 49
    type                           shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 57
    statements                     shift and go to state 151
    ifstatement                    shift and go to state 59
    var                            shift and go to state 51
    funcall                        shift and go to state 60
    voidfuncall                    shift and go to state 61
    pointer                        shift and go to state 52
    statement                      shift and go to state 62
    retstatement                   shift and go to state 63

state 137

    (70) controlbody -> SEMICOLON .

    ELSE            reduce using rule 70 (controlbody -> SEMICOLON .)
    COMMENT         reduce using rule 70 (controlbody -> SEMICOLON .)
    RETURN          reduce using rule 70 (controlbody -> SEMICOLON .)
    IF              reduce using rule 70 (controlbody -> SEMICOLON .)
    WHILE           reduce using rule 70 (controlbody -> SEMICOLON .)
    INT             reduce using rule 70 (controlbody -> SEMICOLON .)
    VOID            reduce using rule 70 (controlbody -> SEMICOLON .)
    FLOAT           reduce using rule 70 (controlbody -> SEMICOLON .)
    TIMES           reduce using rule 70 (controlbody -> SEMICOLON .)
    ID              reduce using rule 70 (controlbody -> SEMICOLON .)
    RBRACE          reduce using rule 70 (controlbody -> SEMICOLON .)


state 138

    (69) controlbody -> statement .

    ELSE            reduce using rule 69 (controlbody -> statement .)
    COMMENT         reduce using rule 69 (controlbody -> statement .)
    RETURN          reduce using rule 69 (controlbody -> statement .)
    IF              reduce using rule 69 (controlbody -> statement .)
    WHILE           reduce using rule 69 (controlbody -> statement .)
    INT             reduce using rule 69 (controlbody -> statement .)
    VOID            reduce using rule 69 (controlbody -> statement .)
    FLOAT           reduce using rule 69 (controlbody -> statement .)
    TIMES           reduce using rule 69 (controlbody -> statement .)
    ID              reduce using rule 69 (controlbody -> statement .)
    RBRACE          reduce using rule 69 (controlbody -> statement .)


state 139

    (64) condition -> condition AND condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    AND             reduce using rule 64 (condition -> condition AND condition .)
    OR              reduce using rule 64 (condition -> condition AND condition .)
    RPAREN          reduce using rule 64 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 112 ]
  ! OR              [ shift and go to state 113 ]


state 140

    (65) condition -> condition OR condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    OR              reduce using rule 65 (condition -> condition OR condition .)
    RPAREN          reduce using rule 65 (condition -> condition OR condition .)
    AND             shift and go to state 112

  ! AND             [ reduce using rule 65 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 113 ]


state 141

    (67) condition -> LPAREN condition RPAREN .

    AND             reduce using rule 67 (condition -> LPAREN condition RPAREN .)
    OR              reduce using rule 67 (condition -> LPAREN condition RPAREN .)
    RPAREN          reduce using rule 67 (condition -> LPAREN condition RPAREN .)


state 142

    (62) condition -> expression EQ expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 62 (condition -> expression EQ expression .)
    OR              reduce using rule 62 (condition -> expression EQ expression .)
    RPAREN          reduce using rule 62 (condition -> expression EQ expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 143

    (60) condition -> expression LE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 60 (condition -> expression LE expression .)
    OR              reduce using rule 60 (condition -> expression LE expression .)
    RPAREN          reduce using rule 60 (condition -> expression LE expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 144

    (58) condition -> expression LT expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 58 (condition -> expression LT expression .)
    OR              reduce using rule 58 (condition -> expression LT expression .)
    RPAREN          reduce using rule 58 (condition -> expression LT expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 145

    (59) condition -> expression GT expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 59 (condition -> expression GT expression .)
    OR              reduce using rule 59 (condition -> expression GT expression .)
    RPAREN          reduce using rule 59 (condition -> expression GT expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 146

    (63) condition -> expression NE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 63 (condition -> expression NE expression .)
    OR              reduce using rule 63 (condition -> expression NE expression .)
    RPAREN          reduce using rule 63 (condition -> expression NE expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 147

    (61) condition -> expression GE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    AND             reduce using rule 61 (condition -> expression GE expression .)
    OR              reduce using rule 61 (condition -> expression GE expression .)
    RPAREN          reduce using rule 61 (condition -> expression GE expression .)
    PLUS            shift and go to state 103
    MINUS           shift and go to state 105
    TIMES           shift and go to state 106
    DIVIDE          shift and go to state 107


state 148

    (37) paramcomp -> COMMA callparam . paramcomp
    (37) paramcomp -> . COMMA callparam paramcomp
    (38) paramcomp -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 38 (paramcomp -> .)

    paramcomp                      shift and go to state 152

state 149

    (73) whilestatement -> WHILE LPAREN condition RPAREN controlbody .

    COMMENT         reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    RETURN          reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    IF              reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    WHILE           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    INT             reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    VOID            reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    FLOAT           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    TIMES           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    ID              reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    RBRACE          reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    ELSE            reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)


state 150

    (72) ifstatement -> IF LPAREN condition RPAREN controlbody ELSE . controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (46) statement -> . assignment
    (47) statement -> . ifstatement
    (48) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 136
    SEMICOLON       shift and go to state 137
    IF              shift and go to state 50
    WHILE           shift and go to state 54
    TIMES           shift and go to state 14
    ID              shift and go to state 13

    controlbody                    shift and go to state 153
    var                            shift and go to state 134
    assignment                     shift and go to state 56
    pointer                        shift and go to state 52
    whilestatement                 shift and go to state 57
    statement                      shift and go to state 138
    ifstatement                    shift and go to state 59

state 151

    (68) controlbody -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 154


state 152

    (37) paramcomp -> COMMA callparam paramcomp .

    RPAREN          reduce using rule 37 (paramcomp -> COMMA callparam paramcomp .)


state 153

    (72) ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .

    COMMENT         reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    RETURN          reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    IF              reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    WHILE           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    INT             reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    VOID            reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    FLOAT           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    TIMES           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    ID              reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    RBRACE          reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    ELSE            reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)


state 154

    (68) controlbody -> LBRACE statements RBRACE .

    ELSE            reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    COMMENT         reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    IF              reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    INT             reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    VOID            reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    FLOAT           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    ID              reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)

