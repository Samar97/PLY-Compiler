Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarations funcdefs
Rule 2     funcdefs -> function funcdefs
Rule 3     funcdefs -> function
Rule 4     declarations -> declarations declaration
Rule 5     declarations -> declarations funcproto
Rule 6     declarations -> <empty>
Rule 7     funcproto -> ftypename LPAREN args RPAREN SEMICOLON
Rule 8     ftypename -> type fname
Rule 9     param -> var
Rule 10    param -> pointer
Rule 11    param -> address
Rule 12    function -> ftypename LPAREN dargs statements RBRACE
Rule 13    dargs -> args RPAREN LBRACE
Rule 14    type -> INT
Rule 15    type -> VOID
Rule 16    type -> FLOAT
Rule 17    main -> MAIN
Rule 18    fname -> var
Rule 19    fname -> pointer
Rule 20    fname -> main
Rule 21    args -> arg argcomp
Rule 22    args -> <empty>
Rule 23    argcomp -> COMMA arg argcomp
Rule 24    argcomp -> <empty>
Rule 25    arg -> type param
Rule 26    var -> ID
Rule 27    const -> NUMBER
Rule 28    const -> FLOAT
Rule 29    pointer -> TIMES pointer
Rule 30    pointer -> TIMES address
Rule 31    pointer -> TIMES var
Rule 32    address -> AMPERSAND pointer
Rule 33    address -> AMPERSAND address
Rule 34    address -> AMPERSAND var
Rule 35    voidfuncall -> funcall SEMICOLON
Rule 36    funcall -> var LPAREN params RPAREN
Rule 37    params -> callparam paramcomp
Rule 38    params -> <empty>
Rule 39    paramcomp -> COMMA callparam paramcomp
Rule 40    paramcomp -> <empty>
Rule 41    callparam -> param
Rule 42    callparam -> const
Rule 43    statements -> statement statements
Rule 44    statements -> COMMENT statements
Rule 45    statements -> declaration statements
Rule 46    statements -> voidfuncall statements
Rule 47    statements -> <empty>
Rule 48    statement -> assignment
Rule 49    statement -> ifstatement
Rule 50    statement -> whilestatement
Rule 51    declaration -> type idlist SEMICOLON
Rule 52    idlist -> decl_var COMMA idlist
Rule 53    idlist -> decl_var
Rule 54    decl_var -> var
Rule 55    decl_var -> pointer
Rule 56    assignment -> pointer EQUALS expression SEMICOLON
Rule 57    assignment -> var EQUALS expression SEMICOLON
Rule 58    condition -> expression LT expression
Rule 59    condition -> expression GT expression
Rule 60    condition -> expression LE expression
Rule 61    condition -> expression GE expression
Rule 62    condition -> expression EQ expression
Rule 63    condition -> expression NE expression
Rule 64    condition -> condition AND condition
Rule 65    condition -> condition OR condition
Rule 66    condition -> NOT condition
Rule 67    condition -> LPAREN condition RPAREN
Rule 68    controlbody -> LBRACE statements RBRACE
Rule 69    controlbody -> statement
Rule 70    controlbody -> SEMICOLON
Rule 71    ifstatement -> IF LPAREN condition RPAREN controlbody
Rule 72    ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody
Rule 73    whilestatement -> WHILE LPAREN condition RPAREN controlbody
Rule 74    expression -> expression PLUS expression
Rule 75    expression -> expression MINUS expression
Rule 76    expression -> expression TIMES expression
Rule 77    expression -> expression DIVIDE expression
Rule 78    expression -> pointer
Rule 79    expression -> address
Rule 80    expression -> const
Rule 81    expression -> var
Rule 82    expression -> funcall
Rule 83    expression -> LPAREN expression RPAREN
Rule 84    expression -> MINUS expression

Terminals, with rules where they appear

AMPERSAND            : 32 33 34
AND                  : 64
COMMA                : 23 39 52
COMMENT              : 44
DIVIDE               : 77
ELSE                 : 72
EQ                   : 62
EQUALS               : 56 57
FLOAT                : 16 28
GE                   : 61
GT                   : 59
ID                   : 26
IF                   : 71 72
INT                  : 14
LBRACE               : 13 68
LE                   : 60
LPAREN               : 7 12 36 67 71 72 73 83
LT                   : 58
MAIN                 : 17
MINUS                : 75 84
NE                   : 63
NOT                  : 66
NUMBER               : 27
OR                   : 65
PLUS                 : 74
RBRACE               : 12 68
RPAREN               : 7 13 36 67 71 72 73 83
SEMICOLON            : 7 35 51 56 57 70
TIMES                : 29 30 31 76
VOID                 : 15
WHILE                : 73
error                : 

Nonterminals, with rules where they appear

address              : 11 30 33 79
arg                  : 21 23
argcomp              : 21 23
args                 : 7 13
assignment           : 48
callparam            : 37 39
condition            : 64 64 65 65 66 67 71 72 73
const                : 42 80
controlbody          : 71 72 72 73
dargs                : 12
decl_var             : 52 53
declaration          : 4 45
declarations         : 1 4 5
expression           : 56 57 58 58 59 59 60 60 61 61 62 62 63 63 74 74 75 75 76 76 77 77 83 84
fname                : 8
ftypename            : 7 12
funcall              : 35 82
funcdefs             : 1 2
funcproto            : 5
function             : 2 3
idlist               : 51 52
ifstatement          : 49
main                 : 20
param                : 25 41
paramcomp            : 37 39
params               : 36
pointer              : 10 19 29 32 55 56 78
program              : 0
statement            : 43 69
statements           : 12 43 44 45 46 68
type                 : 8 25 51
var                  : 9 18 31 34 36 54 57 81
voidfuncall          : 46
whilestatement       : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarations funcdefs
    (4) declarations -> . declarations declaration
    (5) declarations -> . declarations funcproto
    (6) declarations -> .

    INT             reduce using rule 6 (declarations -> .)
    VOID            reduce using rule 6 (declarations -> .)
    FLOAT           reduce using rule 6 (declarations -> .)

    program                        shift and go to state 1
    declarations                   shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declarations . funcdefs
    (4) declarations -> declarations . declaration
    (5) declarations -> declarations . funcproto
    (2) funcdefs -> . function funcdefs
    (3) funcdefs -> . function
    (51) declaration -> . type idlist SEMICOLON
    (7) funcproto -> . ftypename LPAREN args RPAREN SEMICOLON
    (12) function -> . ftypename LPAREN dargs statements RBRACE
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (8) ftypename -> . type fname

    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8

    function                       shift and go to state 3
    funcdefs                       shift and go to state 4
    ftypename                      shift and go to state 6
    funcproto                      shift and go to state 7
    declaration                    shift and go to state 9
    type                           shift and go to state 10

state 3

    (2) funcdefs -> function . funcdefs
    (3) funcdefs -> function .
    (2) funcdefs -> . function funcdefs
    (3) funcdefs -> . function
    (12) function -> . ftypename LPAREN dargs statements RBRACE
    (8) ftypename -> . type fname
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT

    $end            reduce using rule 3 (funcdefs -> function .)
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8

    function                       shift and go to state 3
    funcdefs                       shift and go to state 12
    ftypename                      shift and go to state 13
    type                           shift and go to state 14

state 4

    (1) program -> declarations funcdefs .

    $end            reduce using rule 1 (program -> declarations funcdefs .)


state 5

    (14) type -> INT .

    ID              reduce using rule 14 (type -> INT .)
    TIMES           reduce using rule 14 (type -> INT .)
    AMPERSAND       reduce using rule 14 (type -> INT .)
    MAIN            reduce using rule 14 (type -> INT .)


state 6

    (7) funcproto -> ftypename . LPAREN args RPAREN SEMICOLON
    (12) function -> ftypename . LPAREN dargs statements RBRACE

    LPAREN          shift and go to state 15


state 7

    (5) declarations -> declarations funcproto .

    INT             reduce using rule 5 (declarations -> declarations funcproto .)
    VOID            reduce using rule 5 (declarations -> declarations funcproto .)
    FLOAT           reduce using rule 5 (declarations -> declarations funcproto .)


state 8

    (16) type -> FLOAT .

    ID              reduce using rule 16 (type -> FLOAT .)
    TIMES           reduce using rule 16 (type -> FLOAT .)
    AMPERSAND       reduce using rule 16 (type -> FLOAT .)
    MAIN            reduce using rule 16 (type -> FLOAT .)


state 9

    (4) declarations -> declarations declaration .

    INT             reduce using rule 4 (declarations -> declarations declaration .)
    VOID            reduce using rule 4 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 4 (declarations -> declarations declaration .)


state 10

    (51) declaration -> type . idlist SEMICOLON
    (8) ftypename -> type . fname
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (18) fname -> . var
    (19) fname -> . pointer
    (20) fname -> . main
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (17) main -> . MAIN

    ID              shift and go to state 23
    TIMES           shift and go to state 19
    MAIN            shift and go to state 16

    idlist                         shift and go to state 17
    fname                          shift and go to state 20
    var                            shift and go to state 21
    main                           shift and go to state 22
    pointer                        shift and go to state 18
    decl_var                       shift and go to state 24

state 11

    (15) type -> VOID .

    ID              reduce using rule 15 (type -> VOID .)
    TIMES           reduce using rule 15 (type -> VOID .)
    AMPERSAND       reduce using rule 15 (type -> VOID .)
    MAIN            reduce using rule 15 (type -> VOID .)


state 12

    (2) funcdefs -> function funcdefs .

    $end            reduce using rule 2 (funcdefs -> function funcdefs .)


state 13

    (12) function -> ftypename . LPAREN dargs statements RBRACE

    LPAREN          shift and go to state 25


state 14

    (8) ftypename -> type . fname
    (18) fname -> . var
    (19) fname -> . pointer
    (20) fname -> . main
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (17) main -> . MAIN

    ID              shift and go to state 23
    TIMES           shift and go to state 19
    MAIN            shift and go to state 16

    fname                          shift and go to state 20
    var                            shift and go to state 26
    main                           shift and go to state 22
    pointer                        shift and go to state 27

state 15

    (7) funcproto -> ftypename LPAREN . args RPAREN SEMICOLON
    (12) function -> ftypename LPAREN . dargs statements RBRACE
    (21) args -> . arg argcomp
    (22) args -> .
    (13) dargs -> . args RPAREN LBRACE
    (25) arg -> . type param
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT

    RPAREN          reduce using rule 22 (args -> .)
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8

    args                           shift and go to state 28
    arg                            shift and go to state 29
    type                           shift and go to state 30
    dargs                          shift and go to state 31

state 16

    (17) main -> MAIN .

    LPAREN          reduce using rule 17 (main -> MAIN .)


state 17

    (51) declaration -> type idlist . SEMICOLON

    SEMICOLON       shift and go to state 32


state 18

    (19) fname -> pointer .
    (55) decl_var -> pointer .

    LPAREN          reduce using rule 19 (fname -> pointer .)
    COMMA           reduce using rule 55 (decl_var -> pointer .)
    SEMICOLON       reduce using rule 55 (decl_var -> pointer .)


state 19

    (29) pointer -> TIMES . pointer
    (30) pointer -> TIMES . address
    (31) pointer -> TIMES . var
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (26) var -> . ID

    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    ID              shift and go to state 23

    var                            shift and go to state 35
    pointer                        shift and go to state 36
    address                        shift and go to state 34

state 20

    (8) ftypename -> type fname .

    LPAREN          reduce using rule 8 (ftypename -> type fname .)


state 21

    (18) fname -> var .
    (54) decl_var -> var .

    LPAREN          reduce using rule 18 (fname -> var .)
    COMMA           reduce using rule 54 (decl_var -> var .)
    SEMICOLON       reduce using rule 54 (decl_var -> var .)


state 22

    (20) fname -> main .

    LPAREN          reduce using rule 20 (fname -> main .)


state 23

    (26) var -> ID .

    COMMA           reduce using rule 26 (var -> ID .)
    RPAREN          reduce using rule 26 (var -> ID .)
    SEMICOLON       reduce using rule 26 (var -> ID .)
    LPAREN          reduce using rule 26 (var -> ID .)
    PLUS            reduce using rule 26 (var -> ID .)
    MINUS           reduce using rule 26 (var -> ID .)
    TIMES           reduce using rule 26 (var -> ID .)
    DIVIDE          reduce using rule 26 (var -> ID .)
    LT              reduce using rule 26 (var -> ID .)
    GT              reduce using rule 26 (var -> ID .)
    LE              reduce using rule 26 (var -> ID .)
    GE              reduce using rule 26 (var -> ID .)
    EQ              reduce using rule 26 (var -> ID .)
    NE              reduce using rule 26 (var -> ID .)
    AND             reduce using rule 26 (var -> ID .)
    OR              reduce using rule 26 (var -> ID .)
    EQUALS          reduce using rule 26 (var -> ID .)


state 24

    (52) idlist -> decl_var . COMMA idlist
    (53) idlist -> decl_var .

    COMMA           shift and go to state 37
    SEMICOLON       reduce using rule 53 (idlist -> decl_var .)


state 25

    (12) function -> ftypename LPAREN . dargs statements RBRACE
    (13) dargs -> . args RPAREN LBRACE
    (21) args -> . arg argcomp
    (22) args -> .
    (25) arg -> . type param
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT

    RPAREN          reduce using rule 22 (args -> .)
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8

    args                           shift and go to state 38
    arg                            shift and go to state 29
    type                           shift and go to state 30
    dargs                          shift and go to state 31

state 26

    (18) fname -> var .

    LPAREN          reduce using rule 18 (fname -> var .)


state 27

    (19) fname -> pointer .

    LPAREN          reduce using rule 19 (fname -> pointer .)


state 28

    (7) funcproto -> ftypename LPAREN args . RPAREN SEMICOLON
    (13) dargs -> args . RPAREN LBRACE

    RPAREN          shift and go to state 39


state 29

    (21) args -> arg . argcomp
    (23) argcomp -> . COMMA arg argcomp
    (24) argcomp -> .

    COMMA           shift and go to state 40
    RPAREN          reduce using rule 24 (argcomp -> .)

    argcomp                        shift and go to state 41

state 30

    (25) arg -> type . param
    (9) param -> . var
    (10) param -> . pointer
    (11) param -> . address
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var

    ID              shift and go to state 23
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33

    var                            shift and go to state 44
    pointer                        shift and go to state 45
    param                          shift and go to state 42
    address                        shift and go to state 43

state 31

    (12) function -> ftypename LPAREN dargs . statements RBRACE
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 46
    statement                      shift and go to state 52
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    pointer                        shift and go to state 49
    voidfuncall                    shift and go to state 55
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    ifstatement                    shift and go to state 59

state 32

    (51) declaration -> type idlist SEMICOLON .

    INT             reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    VOID            reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    FLOAT           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    COMMENT         reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    IF              reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    WHILE           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    TIMES           reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    ID              reduce using rule 51 (declaration -> type idlist SEMICOLON .)
    RBRACE          reduce using rule 51 (declaration -> type idlist SEMICOLON .)


state 33

    (32) address -> AMPERSAND . pointer
    (33) address -> AMPERSAND . address
    (34) address -> AMPERSAND . var
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (26) var -> . ID

    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    ID              shift and go to state 23

    var                            shift and go to state 61
    pointer                        shift and go to state 62
    address                        shift and go to state 60

state 34

    (30) pointer -> TIMES address .

    EQUALS          reduce using rule 30 (pointer -> TIMES address .)
    PLUS            reduce using rule 30 (pointer -> TIMES address .)
    MINUS           reduce using rule 30 (pointer -> TIMES address .)
    TIMES           reduce using rule 30 (pointer -> TIMES address .)
    DIVIDE          reduce using rule 30 (pointer -> TIMES address .)
    LT              reduce using rule 30 (pointer -> TIMES address .)
    GT              reduce using rule 30 (pointer -> TIMES address .)
    LE              reduce using rule 30 (pointer -> TIMES address .)
    GE              reduce using rule 30 (pointer -> TIMES address .)
    EQ              reduce using rule 30 (pointer -> TIMES address .)
    NE              reduce using rule 30 (pointer -> TIMES address .)
    SEMICOLON       reduce using rule 30 (pointer -> TIMES address .)
    RPAREN          reduce using rule 30 (pointer -> TIMES address .)
    AND             reduce using rule 30 (pointer -> TIMES address .)
    OR              reduce using rule 30 (pointer -> TIMES address .)
    LPAREN          reduce using rule 30 (pointer -> TIMES address .)
    COMMA           reduce using rule 30 (pointer -> TIMES address .)


state 35

    (31) pointer -> TIMES var .

    EQUALS          reduce using rule 31 (pointer -> TIMES var .)
    PLUS            reduce using rule 31 (pointer -> TIMES var .)
    MINUS           reduce using rule 31 (pointer -> TIMES var .)
    TIMES           reduce using rule 31 (pointer -> TIMES var .)
    DIVIDE          reduce using rule 31 (pointer -> TIMES var .)
    LT              reduce using rule 31 (pointer -> TIMES var .)
    GT              reduce using rule 31 (pointer -> TIMES var .)
    LE              reduce using rule 31 (pointer -> TIMES var .)
    GE              reduce using rule 31 (pointer -> TIMES var .)
    EQ              reduce using rule 31 (pointer -> TIMES var .)
    NE              reduce using rule 31 (pointer -> TIMES var .)
    SEMICOLON       reduce using rule 31 (pointer -> TIMES var .)
    RPAREN          reduce using rule 31 (pointer -> TIMES var .)
    AND             reduce using rule 31 (pointer -> TIMES var .)
    OR              reduce using rule 31 (pointer -> TIMES var .)
    LPAREN          reduce using rule 31 (pointer -> TIMES var .)
    COMMA           reduce using rule 31 (pointer -> TIMES var .)


state 36

    (29) pointer -> TIMES pointer .

    EQUALS          reduce using rule 29 (pointer -> TIMES pointer .)
    PLUS            reduce using rule 29 (pointer -> TIMES pointer .)
    MINUS           reduce using rule 29 (pointer -> TIMES pointer .)
    TIMES           reduce using rule 29 (pointer -> TIMES pointer .)
    DIVIDE          reduce using rule 29 (pointer -> TIMES pointer .)
    LT              reduce using rule 29 (pointer -> TIMES pointer .)
    GT              reduce using rule 29 (pointer -> TIMES pointer .)
    LE              reduce using rule 29 (pointer -> TIMES pointer .)
    GE              reduce using rule 29 (pointer -> TIMES pointer .)
    EQ              reduce using rule 29 (pointer -> TIMES pointer .)
    NE              reduce using rule 29 (pointer -> TIMES pointer .)
    SEMICOLON       reduce using rule 29 (pointer -> TIMES pointer .)
    RPAREN          reduce using rule 29 (pointer -> TIMES pointer .)
    AND             reduce using rule 29 (pointer -> TIMES pointer .)
    OR              reduce using rule 29 (pointer -> TIMES pointer .)
    LPAREN          reduce using rule 29 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 29 (pointer -> TIMES pointer .)


state 37

    (52) idlist -> decl_var COMMA . idlist
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var

    ID              shift and go to state 23
    TIMES           shift and go to state 19

    var                            shift and go to state 64
    pointer                        shift and go to state 65
    idlist                         shift and go to state 63
    decl_var                       shift and go to state 24

state 38

    (13) dargs -> args . RPAREN LBRACE

    RPAREN          shift and go to state 66


state 39

    (7) funcproto -> ftypename LPAREN args RPAREN . SEMICOLON
    (13) dargs -> args RPAREN . LBRACE

    SEMICOLON       shift and go to state 68
    LBRACE          shift and go to state 67


state 40

    (23) argcomp -> COMMA . arg argcomp
    (25) arg -> . type param
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT

    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8

    type                           shift and go to state 30
    arg                            shift and go to state 69

state 41

    (21) args -> arg argcomp .

    RPAREN          reduce using rule 21 (args -> arg argcomp .)


state 42

    (25) arg -> type param .

    COMMA           reduce using rule 25 (arg -> type param .)
    RPAREN          reduce using rule 25 (arg -> type param .)


state 43

    (11) param -> address .

    COMMA           reduce using rule 11 (param -> address .)
    RPAREN          reduce using rule 11 (param -> address .)


state 44

    (9) param -> var .

    COMMA           reduce using rule 9 (param -> var .)
    RPAREN          reduce using rule 9 (param -> var .)


state 45

    (10) param -> pointer .

    COMMA           reduce using rule 10 (param -> pointer .)
    RPAREN          reduce using rule 10 (param -> pointer .)


state 46

    (12) function -> ftypename LPAREN dargs statements . RBRACE

    RBRACE          shift and go to state 70


state 47

    (35) voidfuncall -> funcall . SEMICOLON

    SEMICOLON       shift and go to state 71


state 48

    (73) whilestatement -> WHILE . LPAREN condition RPAREN controlbody

    LPAREN          shift and go to state 72


state 49

    (56) assignment -> pointer . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 73


state 50

    (44) statements -> COMMENT . statements
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 74
    statement                      shift and go to state 52
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    voidfuncall                    shift and go to state 55
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    pointer                        shift and go to state 49
    ifstatement                    shift and go to state 59

state 51

    (50) statement -> whilestatement .

    COMMENT         reduce using rule 50 (statement -> whilestatement .)
    IF              reduce using rule 50 (statement -> whilestatement .)
    WHILE           reduce using rule 50 (statement -> whilestatement .)
    INT             reduce using rule 50 (statement -> whilestatement .)
    VOID            reduce using rule 50 (statement -> whilestatement .)
    FLOAT           reduce using rule 50 (statement -> whilestatement .)
    TIMES           reduce using rule 50 (statement -> whilestatement .)
    ID              reduce using rule 50 (statement -> whilestatement .)
    RBRACE          reduce using rule 50 (statement -> whilestatement .)
    ELSE            reduce using rule 50 (statement -> whilestatement .)


state 52

    (43) statements -> statement . statements
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 75
    statement                      shift and go to state 52
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    voidfuncall                    shift and go to state 55
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    pointer                        shift and go to state 49
    ifstatement                    shift and go to state 59

state 53

    (57) assignment -> var . EQUALS expression SEMICOLON
    (36) funcall -> var . LPAREN params RPAREN

    EQUALS          shift and go to state 76
    LPAREN          shift and go to state 77


state 54

    (51) declaration -> type . idlist SEMICOLON
    (52) idlist -> . decl_var COMMA idlist
    (53) idlist -> . decl_var
    (54) decl_var -> . var
    (55) decl_var -> . pointer
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var

    ID              shift and go to state 23
    TIMES           shift and go to state 19

    idlist                         shift and go to state 17
    var                            shift and go to state 64
    pointer                        shift and go to state 65
    decl_var                       shift and go to state 24

state 55

    (46) statements -> voidfuncall . statements
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 78
    voidfuncall                    shift and go to state 55
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    statement                      shift and go to state 52
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    pointer                        shift and go to state 49
    ifstatement                    shift and go to state 59

state 56

    (48) statement -> assignment .

    COMMENT         reduce using rule 48 (statement -> assignment .)
    IF              reduce using rule 48 (statement -> assignment .)
    WHILE           reduce using rule 48 (statement -> assignment .)
    INT             reduce using rule 48 (statement -> assignment .)
    VOID            reduce using rule 48 (statement -> assignment .)
    FLOAT           reduce using rule 48 (statement -> assignment .)
    TIMES           reduce using rule 48 (statement -> assignment .)
    ID              reduce using rule 48 (statement -> assignment .)
    RBRACE          reduce using rule 48 (statement -> assignment .)
    ELSE            reduce using rule 48 (statement -> assignment .)


state 57

    (45) statements -> declaration . statements
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 79
    statement                      shift and go to state 52
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    voidfuncall                    shift and go to state 55
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    pointer                        shift and go to state 49
    ifstatement                    shift and go to state 59

state 58

    (71) ifstatement -> IF . LPAREN condition RPAREN controlbody
    (72) ifstatement -> IF . LPAREN condition RPAREN controlbody ELSE controlbody

    LPAREN          shift and go to state 80


state 59

    (49) statement -> ifstatement .

    COMMENT         reduce using rule 49 (statement -> ifstatement .)
    IF              reduce using rule 49 (statement -> ifstatement .)
    WHILE           reduce using rule 49 (statement -> ifstatement .)
    INT             reduce using rule 49 (statement -> ifstatement .)
    VOID            reduce using rule 49 (statement -> ifstatement .)
    FLOAT           reduce using rule 49 (statement -> ifstatement .)
    TIMES           reduce using rule 49 (statement -> ifstatement .)
    ID              reduce using rule 49 (statement -> ifstatement .)
    RBRACE          reduce using rule 49 (statement -> ifstatement .)
    ELSE            reduce using rule 49 (statement -> ifstatement .)


state 60

    (33) address -> AMPERSAND address .

    PLUS            reduce using rule 33 (address -> AMPERSAND address .)
    MINUS           reduce using rule 33 (address -> AMPERSAND address .)
    TIMES           reduce using rule 33 (address -> AMPERSAND address .)
    DIVIDE          reduce using rule 33 (address -> AMPERSAND address .)
    RPAREN          reduce using rule 33 (address -> AMPERSAND address .)
    AND             reduce using rule 33 (address -> AMPERSAND address .)
    OR              reduce using rule 33 (address -> AMPERSAND address .)
    LPAREN          reduce using rule 33 (address -> AMPERSAND address .)
    COMMA           reduce using rule 33 (address -> AMPERSAND address .)
    SEMICOLON       reduce using rule 33 (address -> AMPERSAND address .)
    EQUALS          reduce using rule 33 (address -> AMPERSAND address .)
    LT              reduce using rule 33 (address -> AMPERSAND address .)
    GT              reduce using rule 33 (address -> AMPERSAND address .)
    LE              reduce using rule 33 (address -> AMPERSAND address .)
    GE              reduce using rule 33 (address -> AMPERSAND address .)
    EQ              reduce using rule 33 (address -> AMPERSAND address .)
    NE              reduce using rule 33 (address -> AMPERSAND address .)


state 61

    (34) address -> AMPERSAND var .

    PLUS            reduce using rule 34 (address -> AMPERSAND var .)
    MINUS           reduce using rule 34 (address -> AMPERSAND var .)
    TIMES           reduce using rule 34 (address -> AMPERSAND var .)
    DIVIDE          reduce using rule 34 (address -> AMPERSAND var .)
    RPAREN          reduce using rule 34 (address -> AMPERSAND var .)
    AND             reduce using rule 34 (address -> AMPERSAND var .)
    OR              reduce using rule 34 (address -> AMPERSAND var .)
    LPAREN          reduce using rule 34 (address -> AMPERSAND var .)
    COMMA           reduce using rule 34 (address -> AMPERSAND var .)
    SEMICOLON       reduce using rule 34 (address -> AMPERSAND var .)
    EQUALS          reduce using rule 34 (address -> AMPERSAND var .)
    LT              reduce using rule 34 (address -> AMPERSAND var .)
    GT              reduce using rule 34 (address -> AMPERSAND var .)
    LE              reduce using rule 34 (address -> AMPERSAND var .)
    GE              reduce using rule 34 (address -> AMPERSAND var .)
    EQ              reduce using rule 34 (address -> AMPERSAND var .)
    NE              reduce using rule 34 (address -> AMPERSAND var .)


state 62

    (32) address -> AMPERSAND pointer .

    PLUS            reduce using rule 32 (address -> AMPERSAND pointer .)
    MINUS           reduce using rule 32 (address -> AMPERSAND pointer .)
    TIMES           reduce using rule 32 (address -> AMPERSAND pointer .)
    DIVIDE          reduce using rule 32 (address -> AMPERSAND pointer .)
    RPAREN          reduce using rule 32 (address -> AMPERSAND pointer .)
    AND             reduce using rule 32 (address -> AMPERSAND pointer .)
    OR              reduce using rule 32 (address -> AMPERSAND pointer .)
    LPAREN          reduce using rule 32 (address -> AMPERSAND pointer .)
    COMMA           reduce using rule 32 (address -> AMPERSAND pointer .)
    SEMICOLON       reduce using rule 32 (address -> AMPERSAND pointer .)
    EQUALS          reduce using rule 32 (address -> AMPERSAND pointer .)
    LT              reduce using rule 32 (address -> AMPERSAND pointer .)
    GT              reduce using rule 32 (address -> AMPERSAND pointer .)
    LE              reduce using rule 32 (address -> AMPERSAND pointer .)
    GE              reduce using rule 32 (address -> AMPERSAND pointer .)
    EQ              reduce using rule 32 (address -> AMPERSAND pointer .)
    NE              reduce using rule 32 (address -> AMPERSAND pointer .)


state 63

    (52) idlist -> decl_var COMMA idlist .

    SEMICOLON       reduce using rule 52 (idlist -> decl_var COMMA idlist .)


state 64

    (54) decl_var -> var .

    COMMA           reduce using rule 54 (decl_var -> var .)
    SEMICOLON       reduce using rule 54 (decl_var -> var .)


state 65

    (55) decl_var -> pointer .

    COMMA           reduce using rule 55 (decl_var -> pointer .)
    SEMICOLON       reduce using rule 55 (decl_var -> pointer .)


state 66

    (13) dargs -> args RPAREN . LBRACE

    LBRACE          shift and go to state 67


state 67

    (13) dargs -> args RPAREN LBRACE .

    COMMENT         reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    IF              reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    WHILE           reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    INT             reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    VOID            reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    FLOAT           reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    TIMES           reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    ID              reduce using rule 13 (dargs -> args RPAREN LBRACE .)
    RBRACE          reduce using rule 13 (dargs -> args RPAREN LBRACE .)


state 68

    (7) funcproto -> ftypename LPAREN args RPAREN SEMICOLON .

    INT             reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)
    VOID            reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)
    FLOAT           reduce using rule 7 (funcproto -> ftypename LPAREN args RPAREN SEMICOLON .)


state 69

    (23) argcomp -> COMMA arg . argcomp
    (23) argcomp -> . COMMA arg argcomp
    (24) argcomp -> .

    COMMA           shift and go to state 40
    RPAREN          reduce using rule 24 (argcomp -> .)

    argcomp                        shift and go to state 81

state 70

    (12) function -> ftypename LPAREN dargs statements RBRACE .

    INT             reduce using rule 12 (function -> ftypename LPAREN dargs statements RBRACE .)
    VOID            reduce using rule 12 (function -> ftypename LPAREN dargs statements RBRACE .)
    FLOAT           reduce using rule 12 (function -> ftypename LPAREN dargs statements RBRACE .)
    $end            reduce using rule 12 (function -> ftypename LPAREN dargs statements RBRACE .)


state 71

    (35) voidfuncall -> funcall SEMICOLON .

    COMMENT         reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    IF              reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    WHILE           reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    INT             reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    VOID            reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    FLOAT           reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    TIMES           reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    ID              reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)
    RBRACE          reduce using rule 35 (voidfuncall -> funcall SEMICOLON .)


state 72

    (73) whilestatement -> WHILE LPAREN . condition RPAREN controlbody
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    pointer                        shift and go to state 84
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    expression                     shift and go to state 93
    condition                      shift and go to state 90

state 73

    (56) assignment -> pointer EQUALS . expression SEMICOLON
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    pointer                        shift and go to state 84
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    expression                     shift and go to state 95

state 74

    (44) statements -> COMMENT statements .

    RBRACE          reduce using rule 44 (statements -> COMMENT statements .)


state 75

    (43) statements -> statement statements .

    RBRACE          reduce using rule 43 (statements -> statement statements .)


state 76

    (57) assignment -> var EQUALS . expression SEMICOLON
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 96
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 77

    (36) funcall -> var LPAREN . params RPAREN
    (37) params -> . callparam paramcomp
    (38) params -> .
    (41) callparam -> . param
    (42) callparam -> . const
    (9) param -> . var
    (10) param -> . pointer
    (11) param -> . address
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var

    RPAREN          reduce using rule 38 (params -> .)
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33

    const                          shift and go to state 100
    param                          shift and go to state 97
    callparam                      shift and go to state 98
    params                         shift and go to state 99
    address                        shift and go to state 43
    var                            shift and go to state 44
    pointer                        shift and go to state 45

state 78

    (46) statements -> voidfuncall statements .

    RBRACE          reduce using rule 46 (statements -> voidfuncall statements .)


state 79

    (45) statements -> declaration statements .

    RBRACE          reduce using rule 45 (statements -> declaration statements .)


state 80

    (71) ifstatement -> IF LPAREN . condition RPAREN controlbody
    (72) ifstatement -> IF LPAREN . condition RPAREN controlbody ELSE controlbody
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    pointer                        shift and go to state 84
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    expression                     shift and go to state 93
    condition                      shift and go to state 101

state 81

    (23) argcomp -> COMMA arg argcomp .

    RPAREN          reduce using rule 23 (argcomp -> COMMA arg argcomp .)


state 82

    (27) const -> NUMBER .

    LT              reduce using rule 27 (const -> NUMBER .)
    GT              reduce using rule 27 (const -> NUMBER .)
    LE              reduce using rule 27 (const -> NUMBER .)
    GE              reduce using rule 27 (const -> NUMBER .)
    EQ              reduce using rule 27 (const -> NUMBER .)
    NE              reduce using rule 27 (const -> NUMBER .)
    PLUS            reduce using rule 27 (const -> NUMBER .)
    MINUS           reduce using rule 27 (const -> NUMBER .)
    TIMES           reduce using rule 27 (const -> NUMBER .)
    DIVIDE          reduce using rule 27 (const -> NUMBER .)
    COMMA           reduce using rule 27 (const -> NUMBER .)
    RPAREN          reduce using rule 27 (const -> NUMBER .)
    SEMICOLON       reduce using rule 27 (const -> NUMBER .)
    AND             reduce using rule 27 (const -> NUMBER .)
    OR              reduce using rule 27 (const -> NUMBER .)


state 83

    (82) expression -> funcall .

    PLUS            reduce using rule 82 (expression -> funcall .)
    MINUS           reduce using rule 82 (expression -> funcall .)
    TIMES           reduce using rule 82 (expression -> funcall .)
    DIVIDE          reduce using rule 82 (expression -> funcall .)
    LT              reduce using rule 82 (expression -> funcall .)
    GT              reduce using rule 82 (expression -> funcall .)
    LE              reduce using rule 82 (expression -> funcall .)
    GE              reduce using rule 82 (expression -> funcall .)
    EQ              reduce using rule 82 (expression -> funcall .)
    NE              reduce using rule 82 (expression -> funcall .)
    SEMICOLON       reduce using rule 82 (expression -> funcall .)
    RPAREN          reduce using rule 82 (expression -> funcall .)
    AND             reduce using rule 82 (expression -> funcall .)
    OR              reduce using rule 82 (expression -> funcall .)


state 84

    (78) expression -> pointer .

    PLUS            reduce using rule 78 (expression -> pointer .)
    MINUS           reduce using rule 78 (expression -> pointer .)
    TIMES           reduce using rule 78 (expression -> pointer .)
    DIVIDE          reduce using rule 78 (expression -> pointer .)
    LT              reduce using rule 78 (expression -> pointer .)
    GT              reduce using rule 78 (expression -> pointer .)
    LE              reduce using rule 78 (expression -> pointer .)
    GE              reduce using rule 78 (expression -> pointer .)
    EQ              reduce using rule 78 (expression -> pointer .)
    NE              reduce using rule 78 (expression -> pointer .)
    SEMICOLON       reduce using rule 78 (expression -> pointer .)
    RPAREN          reduce using rule 78 (expression -> pointer .)
    AND             reduce using rule 78 (expression -> pointer .)
    OR              reduce using rule 78 (expression -> pointer .)


state 85

    (84) expression -> MINUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 102
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 86

    (81) expression -> var .
    (36) funcall -> var . LPAREN params RPAREN

    PLUS            reduce using rule 81 (expression -> var .)
    MINUS           reduce using rule 81 (expression -> var .)
    TIMES           reduce using rule 81 (expression -> var .)
    DIVIDE          reduce using rule 81 (expression -> var .)
    LT              reduce using rule 81 (expression -> var .)
    GT              reduce using rule 81 (expression -> var .)
    LE              reduce using rule 81 (expression -> var .)
    GE              reduce using rule 81 (expression -> var .)
    EQ              reduce using rule 81 (expression -> var .)
    NE              reduce using rule 81 (expression -> var .)
    SEMICOLON       reduce using rule 81 (expression -> var .)
    RPAREN          reduce using rule 81 (expression -> var .)
    AND             reduce using rule 81 (expression -> var .)
    OR              reduce using rule 81 (expression -> var .)
    LPAREN          shift and go to state 77


state 87

    (67) condition -> LPAREN . condition RPAREN
    (83) expression -> LPAREN . expression RPAREN
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 104
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84
    condition                      shift and go to state 103

state 88

    (79) expression -> address .

    PLUS            reduce using rule 79 (expression -> address .)
    MINUS           reduce using rule 79 (expression -> address .)
    TIMES           reduce using rule 79 (expression -> address .)
    DIVIDE          reduce using rule 79 (expression -> address .)
    LT              reduce using rule 79 (expression -> address .)
    GT              reduce using rule 79 (expression -> address .)
    LE              reduce using rule 79 (expression -> address .)
    GE              reduce using rule 79 (expression -> address .)
    EQ              reduce using rule 79 (expression -> address .)
    NE              reduce using rule 79 (expression -> address .)
    SEMICOLON       reduce using rule 79 (expression -> address .)
    RPAREN          reduce using rule 79 (expression -> address .)
    AND             reduce using rule 79 (expression -> address .)
    OR              reduce using rule 79 (expression -> address .)


state 89

    (80) expression -> const .

    PLUS            reduce using rule 80 (expression -> const .)
    MINUS           reduce using rule 80 (expression -> const .)
    TIMES           reduce using rule 80 (expression -> const .)
    DIVIDE          reduce using rule 80 (expression -> const .)
    LT              reduce using rule 80 (expression -> const .)
    GT              reduce using rule 80 (expression -> const .)
    LE              reduce using rule 80 (expression -> const .)
    GE              reduce using rule 80 (expression -> const .)
    EQ              reduce using rule 80 (expression -> const .)
    NE              reduce using rule 80 (expression -> const .)
    SEMICOLON       reduce using rule 80 (expression -> const .)
    RPAREN          reduce using rule 80 (expression -> const .)
    AND             reduce using rule 80 (expression -> const .)
    OR              reduce using rule 80 (expression -> const .)


state 90

    (73) whilestatement -> WHILE LPAREN condition . RPAREN controlbody
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 106
    AND             shift and go to state 105
    OR              shift and go to state 107


state 91

    (28) const -> FLOAT .

    LT              reduce using rule 28 (const -> FLOAT .)
    GT              reduce using rule 28 (const -> FLOAT .)
    LE              reduce using rule 28 (const -> FLOAT .)
    GE              reduce using rule 28 (const -> FLOAT .)
    EQ              reduce using rule 28 (const -> FLOAT .)
    NE              reduce using rule 28 (const -> FLOAT .)
    PLUS            reduce using rule 28 (const -> FLOAT .)
    MINUS           reduce using rule 28 (const -> FLOAT .)
    TIMES           reduce using rule 28 (const -> FLOAT .)
    DIVIDE          reduce using rule 28 (const -> FLOAT .)
    COMMA           reduce using rule 28 (const -> FLOAT .)
    RPAREN          reduce using rule 28 (const -> FLOAT .)
    SEMICOLON       reduce using rule 28 (const -> FLOAT .)
    AND             reduce using rule 28 (const -> FLOAT .)
    OR              reduce using rule 28 (const -> FLOAT .)


state 92

    (66) condition -> NOT . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 93
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84
    condition                      shift and go to state 108

state 93

    (58) condition -> expression . LT expression
    (59) condition -> expression . GT expression
    (60) condition -> expression . LE expression
    (61) condition -> expression . GE expression
    (62) condition -> expression . EQ expression
    (63) condition -> expression . NE expression
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    LT              shift and go to state 112
    GT              shift and go to state 109
    LE              shift and go to state 115
    GE              shift and go to state 114
    EQ              shift and go to state 111
    NE              shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 94

    (83) expression -> LPAREN . expression RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 119
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 95

    (56) assignment -> pointer EQUALS expression . SEMICOLON
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 120
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 96

    (57) assignment -> var EQUALS expression . SEMICOLON
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    SEMICOLON       shift and go to state 121
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 97

    (41) callparam -> param .

    COMMA           reduce using rule 41 (callparam -> param .)
    RPAREN          reduce using rule 41 (callparam -> param .)


state 98

    (37) params -> callparam . paramcomp
    (39) paramcomp -> . COMMA callparam paramcomp
    (40) paramcomp -> .

    COMMA           shift and go to state 123
    RPAREN          reduce using rule 40 (paramcomp -> .)

    paramcomp                      shift and go to state 122

state 99

    (36) funcall -> var LPAREN params . RPAREN

    RPAREN          shift and go to state 124


state 100

    (42) callparam -> const .

    COMMA           reduce using rule 42 (callparam -> const .)
    RPAREN          reduce using rule 42 (callparam -> const .)


state 101

    (71) ifstatement -> IF LPAREN condition . RPAREN controlbody
    (72) ifstatement -> IF LPAREN condition . RPAREN controlbody ELSE controlbody
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 125
    AND             shift and go to state 105
    OR              shift and go to state 107


state 102

    (84) expression -> MINUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 84 (expression -> MINUS expression .)
    MINUS           reduce using rule 84 (expression -> MINUS expression .)
    TIMES           reduce using rule 84 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 84 (expression -> MINUS expression .)
    LT              reduce using rule 84 (expression -> MINUS expression .)
    GT              reduce using rule 84 (expression -> MINUS expression .)
    LE              reduce using rule 84 (expression -> MINUS expression .)
    GE              reduce using rule 84 (expression -> MINUS expression .)
    EQ              reduce using rule 84 (expression -> MINUS expression .)
    NE              reduce using rule 84 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 84 (expression -> MINUS expression .)
    RPAREN          reduce using rule 84 (expression -> MINUS expression .)
    AND             reduce using rule 84 (expression -> MINUS expression .)
    OR              reduce using rule 84 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 118 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 110 ]


state 103

    (67) condition -> LPAREN condition . RPAREN
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          shift and go to state 126
    AND             shift and go to state 105
    OR              shift and go to state 107


state 104

    (83) expression -> LPAREN expression . RPAREN
    (58) condition -> expression . LT expression
    (59) condition -> expression . GT expression
    (60) condition -> expression . LE expression
    (61) condition -> expression . GE expression
    (62) condition -> expression . EQ expression
    (63) condition -> expression . NE expression
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 127
    LT              shift and go to state 112
    GT              shift and go to state 109
    LE              shift and go to state 115
    GE              shift and go to state 114
    EQ              shift and go to state 111
    NE              shift and go to state 113
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 105

    (64) condition -> condition AND . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 93
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84
    condition                      shift and go to state 128

state 106

    (73) whilestatement -> WHILE LPAREN condition RPAREN . controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 133
    SEMICOLON       shift and go to state 129
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    pointer                        shift and go to state 49
    statement                      shift and go to state 131
    var                            shift and go to state 132
    controlbody                    shift and go to state 130
    ifstatement                    shift and go to state 59

state 107

    (65) condition -> condition OR . condition
    (58) condition -> . expression LT expression
    (59) condition -> . expression GT expression
    (60) condition -> . expression LE expression
    (61) condition -> . expression GE expression
    (62) condition -> . expression EQ expression
    (63) condition -> . expression NE expression
    (64) condition -> . condition AND condition
    (65) condition -> . condition OR condition
    (66) condition -> . NOT condition
    (67) condition -> . LPAREN condition RPAREN
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    NOT             shift and go to state 92
    LPAREN          shift and go to state 87
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 93
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84
    condition                      shift and go to state 134

state 108

    (66) condition -> NOT condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          reduce using rule 66 (condition -> NOT condition .)
    AND             reduce using rule 66 (condition -> NOT condition .)
    OR              reduce using rule 66 (condition -> NOT condition .)

  ! AND             [ shift and go to state 105 ]
  ! OR              [ shift and go to state 107 ]


state 109

    (59) condition -> expression GT . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 135
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 110

    (77) expression -> expression DIVIDE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 136
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 111

    (62) condition -> expression EQ . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 137
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 112

    (58) condition -> expression LT . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 138
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 113

    (63) condition -> expression NE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 139
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 114

    (61) condition -> expression GE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 140
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 115

    (60) condition -> expression LE . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 141
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 116

    (74) expression -> expression PLUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 142
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 117

    (76) expression -> expression TIMES . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 143
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 118

    (75) expression -> expression MINUS . expression
    (74) expression -> . expression PLUS expression
    (75) expression -> . expression MINUS expression
    (76) expression -> . expression TIMES expression
    (77) expression -> . expression DIVIDE expression
    (78) expression -> . pointer
    (79) expression -> . address
    (80) expression -> . const
    (81) expression -> . var
    (82) expression -> . funcall
    (83) expression -> . LPAREN expression RPAREN
    (84) expression -> . MINUS expression
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (36) funcall -> . var LPAREN params RPAREN

    LPAREN          shift and go to state 94
    MINUS           shift and go to state 85
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33
    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23

    const                          shift and go to state 89
    expression                     shift and go to state 144
    funcall                        shift and go to state 83
    address                        shift and go to state 88
    var                            shift and go to state 86
    pointer                        shift and go to state 84

state 119

    (83) expression -> LPAREN expression . RPAREN
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 127
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 120

    (56) assignment -> pointer EQUALS expression SEMICOLON .

    COMMENT         reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    IF              reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    INT             reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    VOID            reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    ID              reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 56 (assignment -> pointer EQUALS expression SEMICOLON .)


state 121

    (57) assignment -> var EQUALS expression SEMICOLON .

    COMMENT         reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    IF              reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    INT             reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    VOID            reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    TIMES           reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    ID              reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)
    ELSE            reduce using rule 57 (assignment -> var EQUALS expression SEMICOLON .)


state 122

    (37) params -> callparam paramcomp .

    RPAREN          reduce using rule 37 (params -> callparam paramcomp .)


state 123

    (39) paramcomp -> COMMA . callparam paramcomp
    (41) callparam -> . param
    (42) callparam -> . const
    (9) param -> . var
    (10) param -> . pointer
    (11) param -> . address
    (27) const -> . NUMBER
    (28) const -> . FLOAT
    (26) var -> . ID
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (32) address -> . AMPERSAND pointer
    (33) address -> . AMPERSAND address
    (34) address -> . AMPERSAND var

    NUMBER          shift and go to state 82
    FLOAT           shift and go to state 91
    ID              shift and go to state 23
    TIMES           shift and go to state 19
    AMPERSAND       shift and go to state 33

    const                          shift and go to state 100
    param                          shift and go to state 97
    callparam                      shift and go to state 145
    address                        shift and go to state 43
    var                            shift and go to state 44
    pointer                        shift and go to state 45

state 124

    (36) funcall -> var LPAREN params RPAREN .

    PLUS            reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    MINUS           reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    TIMES           reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    DIVIDE          reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    RPAREN          reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    AND             reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    OR              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    LT              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    GT              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    LE              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    GE              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    EQ              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)
    NE              reduce using rule 36 (funcall -> var LPAREN params RPAREN .)


state 125

    (71) ifstatement -> IF LPAREN condition RPAREN . controlbody
    (72) ifstatement -> IF LPAREN condition RPAREN . controlbody ELSE controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 133
    SEMICOLON       shift and go to state 129
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    pointer                        shift and go to state 49
    statement                      shift and go to state 131
    var                            shift and go to state 132
    controlbody                    shift and go to state 146
    ifstatement                    shift and go to state 59

state 126

    (67) condition -> LPAREN condition RPAREN .

    RPAREN          reduce using rule 67 (condition -> LPAREN condition RPAREN .)
    AND             reduce using rule 67 (condition -> LPAREN condition RPAREN .)
    OR              reduce using rule 67 (condition -> LPAREN condition RPAREN .)


state 127

    (83) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 83 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 83 (expression -> LPAREN expression RPAREN .)


state 128

    (64) condition -> condition AND condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          reduce using rule 64 (condition -> condition AND condition .)
    AND             reduce using rule 64 (condition -> condition AND condition .)
    OR              reduce using rule 64 (condition -> condition AND condition .)

  ! AND             [ shift and go to state 105 ]
  ! OR              [ shift and go to state 107 ]


state 129

    (70) controlbody -> SEMICOLON .

    COMMENT         reduce using rule 70 (controlbody -> SEMICOLON .)
    IF              reduce using rule 70 (controlbody -> SEMICOLON .)
    WHILE           reduce using rule 70 (controlbody -> SEMICOLON .)
    INT             reduce using rule 70 (controlbody -> SEMICOLON .)
    VOID            reduce using rule 70 (controlbody -> SEMICOLON .)
    FLOAT           reduce using rule 70 (controlbody -> SEMICOLON .)
    TIMES           reduce using rule 70 (controlbody -> SEMICOLON .)
    ID              reduce using rule 70 (controlbody -> SEMICOLON .)
    RBRACE          reduce using rule 70 (controlbody -> SEMICOLON .)
    ELSE            reduce using rule 70 (controlbody -> SEMICOLON .)


state 130

    (73) whilestatement -> WHILE LPAREN condition RPAREN controlbody .

    COMMENT         reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    IF              reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    WHILE           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    INT             reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    VOID            reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    FLOAT           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    TIMES           reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    ID              reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    RBRACE          reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)
    ELSE            reduce using rule 73 (whilestatement -> WHILE LPAREN condition RPAREN controlbody .)


state 131

    (69) controlbody -> statement .

    COMMENT         reduce using rule 69 (controlbody -> statement .)
    IF              reduce using rule 69 (controlbody -> statement .)
    WHILE           reduce using rule 69 (controlbody -> statement .)
    INT             reduce using rule 69 (controlbody -> statement .)
    VOID            reduce using rule 69 (controlbody -> statement .)
    FLOAT           reduce using rule 69 (controlbody -> statement .)
    TIMES           reduce using rule 69 (controlbody -> statement .)
    ID              reduce using rule 69 (controlbody -> statement .)
    RBRACE          reduce using rule 69 (controlbody -> statement .)
    ELSE            reduce using rule 69 (controlbody -> statement .)


state 132

    (57) assignment -> var . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 76


state 133

    (68) controlbody -> LBRACE . statements RBRACE
    (43) statements -> . statement statements
    (44) statements -> . COMMENT statements
    (45) statements -> . declaration statements
    (46) statements -> . voidfuncall statements
    (47) statements -> .
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (51) declaration -> . type idlist SEMICOLON
    (35) voidfuncall -> . funcall SEMICOLON
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (14) type -> . INT
    (15) type -> . VOID
    (16) type -> . FLOAT
    (36) funcall -> . var LPAREN params RPAREN
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    COMMENT         shift and go to state 50
    RBRACE          reduce using rule 47 (statements -> .)
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    INT             shift and go to state 5
    VOID            shift and go to state 11
    FLOAT           shift and go to state 8
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    statements                     shift and go to state 147
    statement                      shift and go to state 52
    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    funcall                        shift and go to state 47
    voidfuncall                    shift and go to state 55
    declaration                    shift and go to state 57
    var                            shift and go to state 53
    type                           shift and go to state 54
    pointer                        shift and go to state 49
    ifstatement                    shift and go to state 59

state 134

    (65) condition -> condition OR condition .
    (64) condition -> condition . AND condition
    (65) condition -> condition . OR condition

    RPAREN          reduce using rule 65 (condition -> condition OR condition .)
    OR              reduce using rule 65 (condition -> condition OR condition .)
    AND             shift and go to state 105

  ! AND             [ reduce using rule 65 (condition -> condition OR condition .) ]
  ! OR              [ shift and go to state 107 ]


state 135

    (59) condition -> expression GT expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 59 (condition -> expression GT expression .)
    AND             reduce using rule 59 (condition -> expression GT expression .)
    OR              reduce using rule 59 (condition -> expression GT expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 136

    (77) expression -> expression DIVIDE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 77 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 77 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 77 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 77 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 77 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 77 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 77 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 77 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 77 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 77 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 77 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 118 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 110 ]


state 137

    (62) condition -> expression EQ expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 62 (condition -> expression EQ expression .)
    AND             reduce using rule 62 (condition -> expression EQ expression .)
    OR              reduce using rule 62 (condition -> expression EQ expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 138

    (58) condition -> expression LT expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 58 (condition -> expression LT expression .)
    AND             reduce using rule 58 (condition -> expression LT expression .)
    OR              reduce using rule 58 (condition -> expression LT expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 139

    (63) condition -> expression NE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 63 (condition -> expression NE expression .)
    AND             reduce using rule 63 (condition -> expression NE expression .)
    OR              reduce using rule 63 (condition -> expression NE expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 140

    (61) condition -> expression GE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 61 (condition -> expression GE expression .)
    AND             reduce using rule 61 (condition -> expression GE expression .)
    OR              reduce using rule 61 (condition -> expression GE expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 141

    (60) condition -> expression LE expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 60 (condition -> expression LE expression .)
    AND             reduce using rule 60 (condition -> expression LE expression .)
    OR              reduce using rule 60 (condition -> expression LE expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 118
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110


state 142

    (74) expression -> expression PLUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 74 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 74 (expression -> expression PLUS expression .)
    LT              reduce using rule 74 (expression -> expression PLUS expression .)
    GT              reduce using rule 74 (expression -> expression PLUS expression .)
    LE              reduce using rule 74 (expression -> expression PLUS expression .)
    GE              reduce using rule 74 (expression -> expression PLUS expression .)
    EQ              reduce using rule 74 (expression -> expression PLUS expression .)
    NE              reduce using rule 74 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 74 (expression -> expression PLUS expression .)
    AND             reduce using rule 74 (expression -> expression PLUS expression .)
    OR              reduce using rule 74 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110

  ! TIMES           [ reduce using rule 74 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 118 ]


state 143

    (76) expression -> expression TIMES expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 76 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 76 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 76 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 76 (expression -> expression TIMES expression .)
    LT              reduce using rule 76 (expression -> expression TIMES expression .)
    GT              reduce using rule 76 (expression -> expression TIMES expression .)
    LE              reduce using rule 76 (expression -> expression TIMES expression .)
    GE              reduce using rule 76 (expression -> expression TIMES expression .)
    EQ              reduce using rule 76 (expression -> expression TIMES expression .)
    NE              reduce using rule 76 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 76 (expression -> expression TIMES expression .)
    AND             reduce using rule 76 (expression -> expression TIMES expression .)
    OR              reduce using rule 76 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 118 ]
  ! TIMES           [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 110 ]


state 144

    (75) expression -> expression MINUS expression .
    (74) expression -> expression . PLUS expression
    (75) expression -> expression . MINUS expression
    (76) expression -> expression . TIMES expression
    (77) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 75 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 75 (expression -> expression MINUS expression .)
    LT              reduce using rule 75 (expression -> expression MINUS expression .)
    GT              reduce using rule 75 (expression -> expression MINUS expression .)
    LE              reduce using rule 75 (expression -> expression MINUS expression .)
    GE              reduce using rule 75 (expression -> expression MINUS expression .)
    EQ              reduce using rule 75 (expression -> expression MINUS expression .)
    NE              reduce using rule 75 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 75 (expression -> expression MINUS expression .)
    AND             reduce using rule 75 (expression -> expression MINUS expression .)
    OR              reduce using rule 75 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 110

  ! TIMES           [ reduce using rule 75 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 118 ]


state 145

    (39) paramcomp -> COMMA callparam . paramcomp
    (39) paramcomp -> . COMMA callparam paramcomp
    (40) paramcomp -> .

    COMMA           shift and go to state 123
    RPAREN          reduce using rule 40 (paramcomp -> .)

    paramcomp                      shift and go to state 148

state 146

    (71) ifstatement -> IF LPAREN condition RPAREN controlbody .
    (72) ifstatement -> IF LPAREN condition RPAREN controlbody . ELSE controlbody

    COMMENT         reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    IF              reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    WHILE           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    INT             reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    VOID            reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    FLOAT           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    TIMES           reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    ID              reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    RBRACE          reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .)
    ELSE            shift and go to state 149

  ! ELSE            [ reduce using rule 71 (ifstatement -> IF LPAREN condition RPAREN controlbody .) ]


state 147

    (68) controlbody -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 150


state 148

    (39) paramcomp -> COMMA callparam paramcomp .

    RPAREN          reduce using rule 39 (paramcomp -> COMMA callparam paramcomp .)


state 149

    (72) ifstatement -> IF LPAREN condition RPAREN controlbody ELSE . controlbody
    (68) controlbody -> . LBRACE statements RBRACE
    (69) controlbody -> . statement
    (70) controlbody -> . SEMICOLON
    (48) statement -> . assignment
    (49) statement -> . ifstatement
    (50) statement -> . whilestatement
    (56) assignment -> . pointer EQUALS expression SEMICOLON
    (57) assignment -> . var EQUALS expression SEMICOLON
    (71) ifstatement -> . IF LPAREN condition RPAREN controlbody
    (72) ifstatement -> . IF LPAREN condition RPAREN controlbody ELSE controlbody
    (73) whilestatement -> . WHILE LPAREN condition RPAREN controlbody
    (29) pointer -> . TIMES pointer
    (30) pointer -> . TIMES address
    (31) pointer -> . TIMES var
    (26) var -> . ID

    LBRACE          shift and go to state 133
    SEMICOLON       shift and go to state 129
    IF              shift and go to state 58
    WHILE           shift and go to state 48
    TIMES           shift and go to state 19
    ID              shift and go to state 23

    assignment                     shift and go to state 56
    whilestatement                 shift and go to state 51
    pointer                        shift and go to state 49
    statement                      shift and go to state 131
    var                            shift and go to state 132
    controlbody                    shift and go to state 151
    ifstatement                    shift and go to state 59

state 150

    (68) controlbody -> LBRACE statements RBRACE .

    COMMENT         reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    IF              reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    WHILE           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    INT             reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    VOID            reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    FLOAT           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    TIMES           reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    ID              reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 68 (controlbody -> LBRACE statements RBRACE .)


state 151

    (72) ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .

    COMMENT         reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    IF              reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    WHILE           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    INT             reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    VOID            reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    FLOAT           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    TIMES           reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    ID              reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    RBRACE          reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)
    ELSE            reduce using rule 72 (ifstatement -> IF LPAREN condition RPAREN controlbody ELSE controlbody .)

